(ns tiltontec.mx-cljd-world
  (:require
    [clojure.string :as string]
    [tiltontec.cell.base :refer [ia-type unbound *depender*] :as cty ]
    [tiltontec.cell.core :as cell
     :refer [cF cF+ cI]]
    [tiltontec.model.core :refer [make mget md-kids cFkids] :as md]
    [tiltontec.mx-flutter.core :as fx
     :refer [render-fx MaterialApp Center]]
    ["package:flutter/widgets.dart"
     :refer [Text State StatefulWidget StatelessWidget]]
    ["package:flutter/material.dart" :as m
     :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
             FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
    ["package:flutter/painting.dart"
     :refer [TextStyle]]
    ;["dart:intl" :as intl]
    [tiltontec.util.core :as util
     :refer [any-ref? rmap-setf err rmap-meta-setf set-ify difference]]
    [tiltontec.cell.observer
     :refer [fn-obs]]
    ))

(defn make-app []
  (fx/render-fx
    (fx/MaterialApp {}
      {:title "Welcome to Red Flutter World"
       :theme (cF (ThemeData. :primarySwatch
                    (let [ttl (mget me :title)]
                      (cond
                        (string/includes? ttl "Reed") m.Colors/red
                        :else m.Colors/yellow))))}
      (fx/Scaffold {}
        {:appBar               (AppBar.
                                 :title (Text. (let [now (.now dart:core/DateTime)
                                                     #_#_fmt (.yMMMd dart:core/DateFormat)]
                                                 ;;(prn :got-now now)
                                                 ;;(prn :got-fmt fmt)
                                                 ;(str "At " (-> (DateTime/now) (-> (intl.DateFormat/yMMd) .format)))
                                                 (str "At " (second (string/split (str now) #" ")))
                                                 #_(.now dart:core/DateTime)
                                                 #_((.format fmt) now))))
         :floatingActionButton (cF (FloatingActionButton.
                                     :onPressed (fn ^void []
                                                  (prn :BAM-press!!!-me @me)
                                                  ;; todo ugh. navigation
                                                  (let [zc (md/fm-navig :z-counter me
                                                             :me? false
                                                             :inside? true :must? false :up? true)]
                                                    ;(prn :zc!!!!!!!!! zc)
                                                    ;(prn :zc!!!!!!!!! (meta zc))
                                                    ;(prn :zcs!! (:state-ref (meta zc)))
                                                    ;(prn :zcnum (mget zc :z-count))
                                                    (md/mswap! zc :z-count inc)
                                                    nil))
                                     :tooltip "Increment"
                                     :child (Icon. Icons/add
                                              :color Colors/black)))}
        (fx/Center {} {}
          (fx/Column {:col-name "Yowza"}
            {:mainAxisAlignment MainAxisAlignment/center}
            (fx/Text {}
              {:style (TextStyle.
                            :color m.Colors/black
                            :fontSize 18.0)}
              "You have clicked the button this many times:")

            ;; (fx/TextS me)
            (tiltontec.model.core/make :type ::Text
              :name :z-counter
              :z-count (cI 42
                         :obs (fn-obs
                                (when-let [^State state (:state-ref (meta me))]
                                  (.setState state (fn [] (do))))))
              :kids (cFkids (str (mget me :z-count)))
              :fx-gen #(let [r# (reify :extends StatefulWidget
                                  (createState [this]
                                    (util/rmap-meta-setf [:state-ref %]
                                      (reify :extends State
                                        (build [this ctx]
                                          (let [theme (Theme/of ctx)]
                                            (Text. (first (md-kids %))
                                              :style (.headline4 (.textTheme theme))
                                              ;; todo work out how mx widgets can see ctx
                                              #_ (mget % :style))))))))]
                         ;;(prn :gennedtesxt!! (meta %))
                         r#))))))))

