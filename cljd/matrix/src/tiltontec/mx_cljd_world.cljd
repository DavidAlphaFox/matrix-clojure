(ns tiltontec.mx-cljd-world
  (:require
    [clojure.string :as string]
    [tiltontec.cell.base :refer [ia-type unbound *depender*] :as cty ]
    [tiltontec.cell.core :as cell
     :refer [cF cF+ cI]]
    [tiltontec.model.core :refer [make mget md-kids cFkids] :as md]
    [tiltontec.mx-flutter.core :as fx
     :refer [render-fx MaterialApp Center]]
    ["package:flutter/widgets.dart"
     :refer [Text State StatefulWidget StatelessWidget]]
    ["package:flutter/material.dart" :as m
     :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
             FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
    ["package:flutter/painting.dart"
     :refer [TextStyle]]
    ;["dart:intl" :as intl]
    [tiltontec.util.core :as util
     :refer [any-ref? rmap-setf err rmap-meta-setf set-ify difference]]
    [tiltontec.cell.observer
     :refer [fn-obs]]
    ))

(defn make-app []
  (fx/render-fx
    (fx/MaterialApp {}
      {:title "Welcome to mxFlutter World"
       :theme (cF (ThemeData. :primarySwatch m.Colors/blue))}
      (fx/Scaffold {}
        {:appBar               (AppBar.
                                 :title (Text. "mxFlutter Home Page"))
         :floatingActionButton (cF (FloatingActionButton.
                                     :onPressed (fn ^void []
                                                  ;; todo ugh. navigation.
                                                  ;; todo inside is necessary because me is the scaffold
                                                  (let [zc (md/fm-navig :z-counter me
                                                             :me? false
                                                             :inside? true :must? true :up? true)]
                                                    (md/mswap! zc :z-count inc)
                                                    nil))
                                     :tooltip "Increment"
                                     :child (Icon. Icons/add :color Colors/black)))}
        (fx/Center {} {}
          (fx/Column {} {:mainAxisAlignment MainAxisAlignment/center}
            (fx/Text {} {:style (TextStyle.
                                  :color m.Colors/black
                                  :fontSize 18.0)}
              "You have clicked the button so many times:")

            (fx/Text {:name :z-counter
                        :z-count (cI 0
                                   :obs (fn-obs
                                          (when-let [^State state (:state-ref (meta me))]
                                            (.setState state (fn [] (do))))))}
              {:style (TextStyle.
                        :color m.Colors/red
                        :fontSize 32.0)}
              (str (mget me :z-count)))
            #_
            (tiltontec.model.core/make :type ::Text
              :name :z-counter
              :z-count (cI 0
                         :obs (fn-obs
                                (when-let [^State state (:state-ref (meta me))]
                                  (.setState state (fn [] (do))))))
              :kids (cFkids (str (mget me :z-count)))
              ;; move next into macro or dedicated fn
              :fx-gen #(reify :extends StatefulWidget
                         (createState [this]
                           (util/rmap-meta-setf [:state-ref %]
                             (reify :extends State
                               (build [this ctx]
                                 (let [theme (Theme/of ctx)]
                                   (Text. (first (md-kids %))
                                     :style (.headline4 (.textTheme theme))
                                     ;; todo work out how mx widgets can see ctx
                                     #_ (mget % :style)))))))))))))))

