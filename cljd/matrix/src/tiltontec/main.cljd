(ns tiltontec.main
  ;; pure dart package are imported using string
  (:require ["package:flutter/material.dart" :as material]
            ["package:flutter/widgets.dart" :as widgets]
            ["package:flutter/painting.dart" :as painting]
            ["dart:developer" :as dev]
            [tiltontec.util.base :as ub]
            [tiltontec.util.core
             :refer [ensure-vec err pln plnk fifo-add fifo-peek fifo-pop cl-find]]
            [tiltontec.testing :as testing]))

;(set! *print-level* 3)
;(set! *print-length* 10)

(def version (atom nil :meta {}))

(defn main []
  (material/runApp
    (material/MaterialApp.
      :title "Welcome to Flutter World"
      :theme (material/ThemeData. :primarySwatch material.Colors/yellow)
      :home (material/Scaffold.
              :appBar (material/AppBar.
                        :title (widgets/Text. (str "At " (.now dart:core/DateTime))))
              :body (do
                      (prn "do-block prn OK" )
                      (prn "do-block> PRN!" :name "It works now!")
                      (dart:core/print (str "do-block dart-core-print-says-hi" :and-42 42))
                      (dart:core/print (dart:core/DateTime. 12 12 12))
                      ;;(dev/log "dev/log do block")
                      (widgets/Center.
                        :child (widgets/Text. (str "hello, world v." (rand-int 999))
                                 :style (painting/TextStyle.
                                          :color material.Colors/blue
                                          :fontSize 32.0)))))))
  ; not working (dev/log "post-runapp> dev/log>" :name "It works now!")
  ; this works but pauses in debugger, so commented out: (dev/debugger)
  (prn "post-runapp> PRN!" :name "It works now!")
  (ub/trc "post-runapp> TRC> hi mom!!")
  (dart:core/print "post-runapp> dart-core-print-says-hi")
  (dart:core/print (dart:core/DateTime. 2012 12 12))
  (dart:core/print (.now dart:core/DateTime))
  (ub/rmap-meta-setf [:cz version] 42)
  (ub/trc (str "meta set " (meta version)))

  #_
  (let [q (atom [])
        qpush (fn [q val] (swap! q conj val))
        qpop (fn [q]
               (let [val (first @q)]
                 (swap! q subvec 1)
                 val))]
    (prn :q @q)
    (qpush q 0)
    (prn :q0 @q)
    (qpush q 1)
    (qpop q)
    (prn :qpop @q)
    (qpush q 2)
    (qpush q 3)
    (qpop q)
    (prn :qpop2 @q))

  #_
  (let [q (atom [])
        qpush (fn [q val] (swap! q conj val))
        qpop (fn [q]
               (let [val (first @q)]
                 (swap! q #(vec (rest %)) #_ #(do (subvec % 1)))
                 val))]
    (qpush q 0)
    (qpush q 1)
    (let [p1 (qpop q)]
      (qpush q 2)
      (let [p2 (qpop q)]
        (prn :qpop2 p2)
        (prn :q @q))))

  #_
  (let [q (atom [])]
    (prn :q @q)
    (fifo-add q 0)
    (prn :q @q)
    (fifo-add q 1)
    (fifo-pop q)
    (fifo-add q 2)
    (fifo-add q 3)
    (fifo-pop q)
    (prn :q @q))
  (testing/run-tests)
  ;;(widgets/debugDumpApp)
  )
