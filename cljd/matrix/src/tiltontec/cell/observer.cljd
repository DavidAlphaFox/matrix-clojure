(ns tiltontec.cell.observer
  (:require
    [tiltontec.util.base
     :refer [type-cljd]
     :refer-macros [trx]]

    [tiltontec.util.core
     :refer [cl-find set-ify any-ref? err ia-ref
             make-fifo-queue fifo-empty? fifo-peek fifo-pop
             fifo-data fifo-add rmap-setf
             wtrx-test]
     :as ut]

    [tiltontec.cell.base
     :refer [c-ref? md-ref? unbound
             +pulse+ c-slot c-value c-md-name
             c-model] :as cty]))

(def +observe-method+ (atom {}))

(defn observer-register [key observer]
  (prn :obs-reg key)
  (swap! +observe-method+ assoc key observer))

(def +observe-default-handler+ (atom nil))

(defn observer-get [key]
  (get @+observe-method+ key))

(defn observe [slot-name me new-val old-val c]
  (let [obs (if-let [obs (observer-get [slot-name (type-cljd me)])]
              (do (prn :using-slot-obs slot-name (type-cljd me))
                  obs)
              (if-let [obs (observer-get (type-cljd me))]
                (do (prn :using-type-obs slot-name (type-cljd me))
                    obs)
                (if-let [obs @+observe-default-handler+]
                  (do ;;(prn :using-default-obs slot-name (type-cljd me))
                      obs)
                  (when (= slot-name :kids)
                    #_ (prn :no-obs-define-for slot-name (type-cljd me)
                      (keys @+observe-method+))))))]
    (when obs (obs slot-name me new-val old-val c))))

(defmacro fn-obs
  "Shortcut definer for cell-specific observers.
body can be multiple sexprs with access to
call parameters: slot, me, new, old, and c."
  [& body]
  `(fn [~'slot ~'me ~'new ~'old ~'c]
     ~@body))

(defn c-observe
  ([c why]
   (c-observe c unbound why))

  ([c prior-value why]
   (assert (c-ref? c))
   (assert (dart/is? @+pulse+ int))
   (rmap-setf [:pulse-observed c] @+pulse+)
   (observe (c-slot c) (c-model c) (c-value c) prior-value c)
   (when-let [cell-observer (:obs @c)]
     (prn :cell-specific-obs!!!!!! @c)
     (cell-observer (c-slot c) (c-model c) (c-value c) prior-value c))))



