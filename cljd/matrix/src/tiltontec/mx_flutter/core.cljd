(ns tiltontec.mx-flutter.core
  (:require ["package:flutter/material.dart" :as m
             :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
                     FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
            ["package:flutter/widgets.dart" :as w
             :refer [Text Center Column StatefulWidget StatelessWidget]]
            ["package:flutter/painting.dart" :as p
             :refer [TextStyle]]
            [tiltontec.cell.base :refer [ia-type unbound] :as cty]
            [tiltontec.model.core :refer [make mget md-kids] :as md]))

(declare render-MaterialApp render-Scaffold render-Text)

(defn render-fx [fx]
  ;; (render-MaterialApp fx)
  (let [gen (mget fx :fx-gen)]
    (when-not gen
      (prn :rfx-sees-no-fx-gen!!! fx))
    (gen fx)))

(defmacro MaterialApp [custom-props fx-props & kids]
  `(tiltontec.model.core/make
     :type ::MaterialApp
     :fx-gen #(m/MaterialApp.
                :title (tiltontec.model.core/mget % :title)
                :theme (tiltontec.model.core/mget % :theme)
                :home (render-fx (first (tiltontec.model.core/md-kids %))))
     :kids (tiltontec.model.core/cFkids ~@kids)
     ~@(concat
         (vec (apply concat (seq fx-props)))
         (vec (apply concat (seq custom-props))))))

(defmacro Scaffold [custom-props fx-props & kids]
  `(tiltontec.model.core/make
     :type ::Scaffold
     :kids (tiltontec.model.core/cFkids ~@kids)
     :fx-gen #(m/Scaffold.
                :appBar (tiltontec.model.core/mget % :appBar)
                :body (render-fx (first (tiltontec.model.core/md-kids %))))
     ~@(concat
         (vec (apply concat (seq fx-props)))
         (vec (apply concat (seq custom-props))))))

(defmacro Text [custom-props fx-props & kids]
  ;; todo: enforce only one kid
  `(tiltontec.model.core/make
     :type ::Text
     :kids (tiltontec.model.core/cFkids ~@kids)
     :fx-gen #(m/Text. (first (tiltontec.model.core/md-kids %))
                :style (tiltontec.model.core/mget % :style))
     ~@(concat
         (vec (apply concat (seq fx-props)))
         (vec (apply concat (seq custom-props))))))

(defmacro Center [custom-props fx-props & kids]
  ;; todo: enforce only one kid
  `(tiltontec.model.core/make
     :type ::Center
     :kids (tiltontec.model.core/cFkids ~@kids)
     :fx-gen #(m/Center.
                :child (render-fx (first (tiltontec.model.core/md-kids %))))
     ~@(concat
         (vec (apply concat (seq fx-props)))
         (vec (apply concat (seq custom-props))))))