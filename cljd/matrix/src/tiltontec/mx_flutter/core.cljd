(ns tiltontec.mx-flutter.core
  (:require ["package:flutter/material.dart" :as m
             :refer [MaterialApp Widget Scaffold MainAxisAlignment Colors Theme
                     FloatingActionButton Icon Icons ThemeData runApp AppBar State]]
            ["package:flutter/widgets.dart" :as w
             :refer [Text Center Column StatefulWidget StatelessWidget]]
            ["package:flutter/painting.dart" :as p
             :refer [TextStyle]]
    ;;[tiltontec.cell.base :refer [ia-type unbound] :as cty]
            [tiltontec.util.core :as util
             :refer [any-ref? rmap-setf err rmap-meta-setf set-ify difference]]
            [tiltontec.model.core :refer [make mget md-kids mswap! cFkids] :as md]))

;; (declare render-MaterialApp render-Scaffold render-Text)

(defn render-fx [fx]
  ;; (render-MaterialApp fx)
  (let [gen (mget fx :fx-gen)]
    (when-not gen
      (prn :rfx-sees-no-fx-gen!!! fx))
    (gen fx)))

(defn statefully [me dart-obj]
  (reify :extends w/StatefulWidget
    (createState [this]
      (util/rmap-meta-setf [:state-ref me]
        (reify :extends w/State
          (build [this ctx]
            (prn :OK-build-is-running-with-me (meta me))
            dart-obj))))))

#_(defmacro Text [custom-props fx-props & kids]
    ;; todo: enforce only one kid
    `(tiltontec.model.core/make
       :type ::Text
       :kids (tiltontec.model.core/cFkids ~@kids)
       :fx-gen #(m/Text. (first (tiltontec.model.core/md-kids %))
                  :style (tiltontec.model.core/mget % :style))
       ~@(concat
           (vec (apply concat (seq fx-props)))
           (vec (apply concat (seq custom-props))))))

(defmacro Text [custom-props fx-props & kids]
  ;; todo: enforce only one kid
  `(tiltontec.model.core/make
     :type ::Text
     :kids (cFkids ~@kids)
     :fx-gen #(do (prn :text-gen-called!!!!!)
                  (let [r# (reify :extends w/StatefulWidget
                             (createState [this]
                               (util/rmap-meta-setf [:state-ref me]
                                 (reify :extends w/State
                                   (build [this ctx]
                                     (prn :OK-build-is-running-with-me (meta me))
                                     (w/Text. (first (md-kids %))
                                       :style (mget % :style)))))))
                        #_ (statefully %
                             (w/Text. (first (md-kids %))
                               :style (mget % :style)))]
                    (prn :gennedtesxt!! (meta %))
                    r#))
     ~@(concat
         (vec (apply concat (seq fx-props)))
         (vec (apply concat (seq custom-props))))))

#_
(defmacro Text [custom-props fx-props & kids]
  ;; todo: enforce only one kid
  `(tiltontec.model.core/make
     :type ::Text
     :kids (cFkids ~@kids)
     :fx-gen #(do (prn :text-gen-called!!!!!)
                  (let [r# (statefully %
                             (w/Text. (first (md-kids %))
                               :style (mget % :style)))]
                    (prn :gennedtesxt!! (meta %))
                    r#))
     ~@(concat
         (vec (apply concat (seq fx-props)))
         (vec (apply concat (seq custom-props))))))

(defmacro MaterialApp [custom-props fx-props & kids]
  `(tiltontec.model.core/make
     :type ::MaterialApp
     :fx-gen #(m/MaterialApp.
                :title (mget % :title)
                :theme (mget % :theme)
                :home (render-fx (first (md-kids %))))
     :kids (tiltontec.model.core/cFkids ~@kids)
     ~@(concat
         (vec (apply concat (seq fx-props)))
         (vec (apply concat (seq custom-props))))))

(defmacro Scaffold [custom-props fx-props & kids]
  `(make :type ::Scaffold
     :kids (cFkids ~@kids)
     :fx-gen #(m/Scaffold.
                :appBar (mget % :appBar)
                :body (render-fx (first (md/md-kids %)))
                :floatingActionButton (mget % :floatingActionButton))
     ~@(concat
         (vec (apply concat (seq fx-props)))
         (vec (apply concat (seq custom-props))))))

(defmacro Column [custom-props fx-props & kids]
  `(make :type ::Column
     :kids (tiltontec.model.core/cFkids ~@kids)
     :fx-gen #(m/Column.
                :mainAxisAlignment (tiltontec.model.core/mget % :mainAxisAlignment)
                :children (mapv render-fx (tiltontec.model.core/md-kids %)))
     ~@(concat
         (vec (apply concat (seq fx-props)))
         (vec (apply concat (seq custom-props))))))

(defmacro Center [custom-props fx-props & kids]
  ;; todo: enforce only one kid
  `(tiltontec.model.core/make
     :type ::Center
     :kids (tiltontec.model.core/cFkids ~@kids)
     :fx-gen #(m/Center.
                :child (render-fx (first (tiltontec.model.core/md-kids %))))
     ~@(concat
         (vec (apply concat (seq fx-props)))
         (vec (apply concat (seq custom-props))))))

#_#_
        (deftype TextSState [me]
          :extends State
          (^Widget build [me ctx]
            (prn :TextSState-build-sees me)
            (Text. (str "Bowza " (mget me :col-name)))))

        (deftype TextS [me]
          :extends StatefulWidget
          (^TextSState createState [this]
            (prn :TEXTS-crestate-sees-me me)
            (TextSState.
              ;; the counter:
              #_ (atom 0)
              me)))

#_#_(defn TextEx-gen [me]
      (reify :extends w/StatefulWidget
        (createState [this]
          (util/rmap-meta-setf [:state-ref me]
            (reify :extends w/State
              (build [this ctx]
                (w/Text. (first (md-kids me))
                  :style (mget me :style))))))))
        (defmacro TextEx [custom-props fx-props & kids]
          ;; todo: enforce only one kid
          `(tiltontec.model.core/make
             :type ::Text
             :kids (cFkids ~@kids)
             :fx-gen TextEx-gen
             #_(fn [me]
                 (reify :extends w/StatefulWidget
                   (~'createState [this#]
                     (reify :extends w/State
                       (~'build [this ctx]
                         (tiltontec.util.core/rmap-meta-setf [:ref me]
                           (Text. (first (tiltontec.model.core/md-kids me))
                             :style (tiltontec.model.core/mget me :style)))))))
                 #_(m/Text. (str "x" (first (tiltontec.model.core/md-kids me)))
                     :style (tiltontec.model.core/mget me :style))
                 )
             ~@(concat
                 (vec (apply concat (seq fx-props)))
                 (vec (apply concat (seq custom-props))))))