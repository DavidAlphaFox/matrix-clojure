(ns tiltontec.util.core
  (:require [clojure.string :as str :refer [join]]
            [tiltontec.util.base :as utm
             :refer [prog1 b-when wtrx]]))

(def ^:dynamic *bam* nil)
;(defn type-of [x] (type x))

(defn xor [a b]
  (or (and a (not b))
    (and b (not a))))

(declare pln xpln)

(defn set-ify [x]
  (cond
    (nil? x) #{}
    (sequential? x) (set x)
    :else #{x}))

(defn cl-find [sought coll]
  (when-not (nil? sought)
    (some #{sought} coll)))

#?(:cljs
   (defn uuidv4 []
     (letfn [(hex [] (.toString (rand-int 16) 16))]
       (let [rhex (.toString (bit-or 0x8 (bit-and 0x3 (rand-int 16))) 16)]
         (uuid
           (str (hex) (hex) (hex) (hex)
             (hex) (hex) (hex) (hex) "-"
             (hex) (hex) (hex) (hex) "-"
             "4"   (hex) (hex) (hex) "-"
             rhex  (hex) (hex) (hex) "-"
             (hex) (hex) (hex) (hex)
             (hex) (hex) (hex) (hex)
             (hex) (hex) (hex) (hex)))))))

;; --- refs with maps conveniences -------------------

(defn ia-ref [x]
  (atom x))

(defn any-ref? [x]
  (dart/is? x cljd.core/Atom))

(defn rmap-setf [[slot ref] new-value]
  (assert (any-ref? ref)
    (pln "model.util.core/rmap-setf> slot:" slot
      "new-value:" new-value
      "failed assertion any-ref? on ref:" ref))
  (assert (map? @ref)
    (pln "model.util.core/rmap-setf> slot:" slot
      "new-value:" new-value
      "failed assertion map? on ref:" ref))
  (swap! ref assoc slot new-value)
  new-value)

(defn rmap-meta-setf [[slot ref] new-value]
  (assert (meta ref))
  #_ (when (some #{slot} [:state-ref])
    (prn :rmap-meta-set!!!!!! slot ref new-value))
  (alter-meta! ref assoc slot new-value)
  #_ (when (some #{slot} [:state-ref])
    (prn :rmap-meta-set-fini!!!!!! (meta ref)))

  new-value)

;; --- error handling -----------------

(defn err [& bits]
  (throw (Exception. (join " " (cons "jz/err>" bits)))))

;(defn wtrx-test [n]
;  (wtrx
;    (0 10 "test" n)
;    (when (> n 0)
;      (wtrx-test (dec n)))))

;; --- deftest support ---------------------
;; These next two are lame because they just
;; look at slots (ignoring models). Use only
;; in tests looking at one model or at least
;; slot names do not duplicate.
;;

(defn slot-users [me slot]
  (set (map :slotq
         (map deref
           (:callers @(slot @me) #{})))))

(defn slot-useds [me slot]
  (set (map :slot
         (map deref
           (:useds @(slot @me) #{})))))

;;; --- FIFO Queue -----------------------------

(defn make-fifo-queue []
  (atom []))

(defn fifo-data [q] @q)

(defn fifo-clear [q]
  (reset! q []))

(defn fifo-empty? [q]
  (empty? @q))

(defn fifo-peek [q]
  (first @q))

(defn fifo-add [q new]
  (swap! q conj new))

(defn fifo-pop [q]
  (when-not (fifo-empty? q)
    (let [val (first @q)]
      (swap! q #(vec (rest %)))
      val)))

;;; --- detritus ----------------------

(defn ensure-vec [x]
  (if (coll? x) (vec x) [x]))

(defn pln [& args]
  (do ;; locking *out*
    (println (join " " args))))

(defn xpln [& args])

(defn eko [key value]
  (pln :eko!!! key value)
  value)

(def ^:dynamic *plnk-keys* [])

(defn plnk [k & r]
  (if (string? (first r))
    (println (pr-str r))
    (when (or (= k :force)
            (some #{k} [*plnk-keys*]))                        ;; [:qxme :addk])
      (println (pr-str r)))))

(defn now []
  (.now dart:core/DateTime))

;;;; --- json -----------------------------
;#?(:cljs
;   (defn map-to-json [map]
;     (trx/write (trx/writer :json) map)))
;
;#?(:cljs
;   (defn json-to-map [json]
;     (trx/read (trx/reader :json) json)))

;;; --- counting ----------------

(def counts (atom nil))

(defn counts-reset []
  (reset! counts nil))

(defn countit "Count it"
  ([path]
   (countit path 1))
  ([path n]
   (if (sequential? path)
     (if (counted? n)
       (countit path (count n))
       (swap! counts update-in path (fnil + 0) n))
     (countit [path] n))))

(defn difference [s so]
  (set (remove so s)))


