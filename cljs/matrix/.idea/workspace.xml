<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="d6f74870-5b99-473b-b2b2-5bc6dd670308" name="Default" comment="" />
    <ignored path="$PROJECT_DIR$/out/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="TRACKING_ENABLED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file leaf-file-name="micropipeline_test.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/test/example/micropipeline_test.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="474">
              <caret line="44" column="28" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="58" selection-end-column="0" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="pipeline_test.cljc" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/test/example/pipeline_test.cljc">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="368">
              <caret line="31" column="22" lean-forward="true" selection-start-line="31" selection-start-column="22" selection-end-line="31" selection-end-column="22" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="micropipeline.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/example/micropipeline.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="111">
              <caret line="78" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="127" selection-end-column="31" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="pipeline.cljc" pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/example/pipeline.cljc">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="1353">
              <caret line="101" column="2" lean-forward="false" selection-start-line="101" selection-start-column="2" selection-end-line="101" selection-end-column="2" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="project.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/project.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="153">
              <caret line="9" column="51" lean-forward="false" selection-start-line="9" selection-start-column="51" selection-end-line="9" selection-end-column="51" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="base.cljc" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/tiltontec/model/base.cljc">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="406">
              <caret line="95" column="15" lean-forward="false" selection-start-line="95" selection-start-column="15" selection-end-line="95" selection-end-column="15" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="core.cljc" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/tiltontec/model/core.cljc">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="80">
              <caret line="110" column="29" lean-forward="false" selection-start-line="110" selection-start-column="29" selection-end-line="110" selection-end-column="29" />
              <folding>
                <marker date="1521202895597" expanded="true" signature="3489:4809" ph="(defn make ...)" />
                <marker date="1521202895597" expanded="true" signature="4949:5172" ph="(defmethod observe ...)" />
                <marker date="1521202895597" expanded="true" signature="5174:5460" ph="(defmethod not-to-be ...)" />
                <marker date="1521202895597" expanded="true" signature="5462:5493" ph="(defn mx-par ...)" />
                <marker date="1521202895597" expanded="true" signature="5495:6200" ph="(defn fget= ...)" />
                <marker date="1521202895597" expanded="true" signature="6202:6732" ph="(defn fasc ...)" />
                <marker date="1521202895597" expanded="true" signature="6734:6923" ph="(defn nextsib ...)" />
                <marker date="1521202895597" expanded="true" signature="6925:7169" ph="(defn prevsib ...)" />
                <marker date="1521202895597" expanded="true" signature="7171:8860" ph="(defn fget ...)" />
                <marker date="1521202895597" expanded="true" signature="8862:8952" ph="(defn fm! ...)" />
                <marker date="1521202895597" expanded="true" signature="8954:9070" ph="(defmacro mdv! ...)" />
                <marker date="1521202895597" expanded="true" signature="9072:9257" ph="(defn mxu-find-name ...)" />
                <marker date="1521202895597" expanded="true" signature="9259:9443" ph="(defn mxu-find-type ...)" />
                <marker date="1521202895597" expanded="true" signature="9445:9590" ph="(defn fmi-w-class ...)" />
                <marker date="1521202895597" expanded="true" signature="9592:9816" ph="(defn mxi-find ...)" />
                <marker date="1521202895597" expanded="true" signature="9818:9991" ph="(defmacro the-kids ...)" />
                <marker date="1521202895597" expanded="true" signature="9993:10131" ph="(defmacro cFkids ...)" />
              </folding>
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="evaluate.cljc" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/tiltontec/cell/evaluate.cljc">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="296">
              <caret line="324" column="26" lean-forward="false" selection-start-line="324" selection-start-column="26" selection-end-line="324" selection-end-column="26" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="base.cljc" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/tiltontec/cell/base.cljc">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="615">
              <caret line="231" column="22" lean-forward="false" selection-start-line="231" selection-start-column="22" selection-end-line="231" selection-end-column="22" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="synapse.cljc" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/tiltontec/cell/synapse.cljc">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="390">
              <caret line="46" column="15" lean-forward="false" selection-start-line="46" selection-start-column="15" selection-end-line="46" selection-end-column="15" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="ClojureScript Namespace" />
        <option value="Clojure Namespace" />
        <option value="CLJC Namespace" />
        <option value="Clojure Test Namespace" />
        <option value="CLJC Test Namespace" />
      </list>
    </option>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>sth</find>
      <find>:segs</find>
      <find>family</find>
      <find>:par</find>
      <find>the-kids</find>
      <find>:value</find>
      <find>print</find>
      <find>cF+</find>
      <find>prop-ig</find>
      <find>c-slot</find>
      <find>pulse-obs</find>
      <find>optimize-a</find>
      <find>c-debug</find>
      <find>optimize-away</find>
      <find>:pipe</find>
      <find>opti-met</find>
      <find>bam-out</find>
      <find>awaken!!!</find>
      <find>ken-com</find>
      <find>:next-seg</find>
      <find>int-map</find>
      <find>trx</find>
      <find>make</find>
      <find>away!!</find>
      <find>awks</find>
      <find>val-store</find>
      <find>:state</find>
      <find>relay-ak</find>
      <find>relay</find>
      <find>a/</find>
    </findStrings>
    <replaceStrings>
      <replace>cFonce</replace>
      <replace>cF</replace>
      <replace>c_F</replace>
      <replace>cI</replace>
      <replace>start</replace>
      <replace>seg</replace>
      <replace>:kids</replace>
      <replace>:par</replace>
      <replace>::state</replace>
      <replace>::cty/state</replace>
    </replaceStrings>
    <dirStrings>
      <dir>$PROJECT_DIR$/src/tiltontec/model</dir>
      <dir>$PROJECT_DIR$/src/tiltontec/</dir>
      <dir>$PROJECT_DIR$/src</dir>
      <dir>$PROJECT_DIR$/src/tiltontec</dir>
    </dirStrings>
  </component>
  <component name="GradleLocalSettings">
    <option name="externalProjectsViewState">
      <projects_view />
    </option>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/tiltontec/cell/synapse.cljc" />
        <option value="$PROJECT_DIR$/src/tiltontec/util/base.cljc" />
        <option value="$PROJECT_DIR$/src/example/micropipeline.cljs" />
        <option value="$PROJECT_DIR$/src/example/micropipeline.cljc" />
        <option value="$PROJECT_DIR$/test/example/micropipeline_test.cljc" />
        <option value="$PROJECT_DIR$/src/tiltontec/cell/observer.cljc" />
        <option value="$PROJECT_DIR$/src/tiltontec/cell/core.cljc" />
        <option value="$PROJECT_DIR$/src/example/micropipeline.clj" />
        <option value="$PROJECT_DIR$/test/example/micropipeline_test.clj" />
        <option value="$PROJECT_DIR$/test/example/pipeline/cljc.clj" />
        <option value="$PROJECT_DIR$/src/tiltontec/cell/base.cljc" />
        <option value="$PROJECT_DIR$/test/example/pipeline_test.cljc" />
        <option value="$PROJECT_DIR$/src/tiltontec/model/core.cljc" />
        <option value="$PROJECT_DIR$/project.clj" />
        <option value="$PROJECT_DIR$/src/tiltontec/model/base.cljc" />
        <option value="$PROJECT_DIR$/src/tiltontec/cell/evaluate.cljc" />
        <option value="$PROJECT_DIR$/src/example/pipeline.cljc" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds">
    <option name="x" value="138" />
    <option name="y" value="68" />
    <option name="width" value="1494" />
    <option name="height" value="886" />
  </component>
  <component name="ProjectView">
    <navigator currentView="ProjectPane" proportions="" version="1">
      <flattenPackages />
      <showMembers />
      <showModules />
      <showLibraryContents />
      <hideEmptyPackages />
      <abbreviatePackageNames />
      <autoscrollToSource />
      <autoscrollFromSource />
      <sortByType />
      <manualOrder />
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="Scratches" />
      <pane id="AndroidView" />
      <pane id="Scope" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="matrix" type="b2602c69:ProjectViewProjectNode" />
              <item name="matrix" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="matrix" type="b2602c69:ProjectViewProjectNode" />
              <item name="matrix" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="matrix" type="b2602c69:ProjectViewProjectNode" />
              <item name="matrix" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="example" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="matrix" type="b2602c69:ProjectViewProjectNode" />
              <item name="matrix" type="462c0819:PsiDirectoryNode" />
              <item name="test" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="matrix" type="b2602c69:ProjectViewProjectNode" />
              <item name="matrix" type="462c0819:PsiDirectoryNode" />
              <item name="test" type="462c0819:PsiDirectoryNode" />
              <item name="example" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="PackagesPane" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="project.structure.last.edited" value="Project" />
    <property name="project.structure.proportion" value="0.0" />
    <property name="project.structure.side.proportion" value="0.0" />
    <property name="settings.editor.selected.configurable" value="configurable.group.build" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="cursive.last.file.extension./Users/kennethtilton/matrix/cljs/matrix/src" value="cljc" />
    <property name="cursive.last.file.extension./Users/kennethtilton/matrix/cljs/matrix/test" value="cljc" />
  </component>
  <component name="ReplState" timestamp="1521264996049">{:repl-history {:ide [], :local [{:command &quot;(defn pipe-segs [pipe]\n  (&lt;mget pipe :kids))&quot;, :offset 44, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn pipe-seg-execute [stp]\n  ;; todo find and cache to-rq, to-indata, to-ak\n  (pln :go-seg!! @stp)\n  (a/go\n    (loop []\n      (when (a/&lt;! (:in-rq @stp))\n        (pln :got-in-rq! (:id @stp))\n        (pln :reading (:in-data @stp))\n        ;; unlike h/w, rq goes out before data (or we would block on data and never see rq)\n        (let [d (a/&lt;! (:in-data @stp))]\n          (when (nil? d)\n            (pln :indata-closed-after-inrq!))\n\n          (when d\n            (pln :inakking)\n            (a/&gt;! (:in-ak stp) true) ;; make async put, or can we rely on them being waiting?\n            (pln :computing)\n            (let [d-out ((:process stp) d)]\n              (pln :computed-dout d-out)\n              (swap! stp :out-data d-out)\n              (recur)))))))\n\n  (pln :closing-seg!!! (:id @stp))\n  (a/close! (:in-data @stp))\n  (a/close! (:in-ak @stp))\n  ;; close out-rq to receiver if any\n  )&quot;, :offset 891, :ns &quot;example.micropipeline&quot;} {:command &quot;(:in-data @(first (:segs @pipe)))&quot;, :offset 33, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-rq @(first (:segs @pipe))))\n\n      (a/put! (:in-rq @(first (:segs @pipe))) true)\n      (pln :inrq-put!)\n      (pln :indta-chan!!!! (:in-data @(first (:segs @pipe))))\n      (when (a/put! (:in-data @(first (:segs @pipe))) [0 1 2])\n          (pln :piped!)\n          (when (a/&lt;!! (:in-ack @(last (:segs @pipe)))))\n          (let [out (a/&lt;!! (:out-data @(last (:segs @pipe))))]\n            (assert (not (nil? out)))\n            (assert (= out [1 3 5]))))))&quot;, :offset 866, :ns &quot;example.micropipeline&quot;} {:command &quot;42&quot;, :offset 2, :ns &quot;user&quot;} {:command &quot;(defn data-ack\n  (cells-init)\n  (let [pipe (make-pipeline\n               (fn [data]\n                 (map #(* % 2) data))\n               (fn [data]\n                 (map #(+ % 100) data)))]\n    (if (async/&gt;!! (:in-data (first (:steps pipe))) [0 1 2])\n      (do\n        (pln :piped!)\n        (let [out (async/&lt;!! (:out-data (last (:steps pipe))))]\n          (is (not (nil? out)))\n          (is (= out [1 3 5])))))))&quot;, :offset 414, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn make-pipeline [&amp; processors]\n  (md/make ::pipeline\n    :segs (cF (for [id (range (count processors))]\n                (make-pipe-seg me id (nth processors id))))))&quot;, :offset 169, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n  (cells-init)\n  (let [pipe (make-pipeline\n               (fn [data]\n                 (map #(* % 2) data))\n               (fn [data]\n                 (map #(+ % 100) data)))]\n    \n    (doseq [seg (:segs @pipe)]\n      (pipe-seg-execute seg))\n\n    (pln :go!!!! (:in-data (first (:steps pipe))))\n    (if (a/&gt;!! (:in-data (first (:steps pipe))) [0 1 2])\n      (do\n        (pln :piped!)\n        (let [out (a/&lt;!! (:out-data (last (:steps pipe))))]\n          (assert (not (nil? out)))\n          (assert (= out [1 3 5])))))))&quot;, :offset 535, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n  (cells-init)\n  (let [pipe (make-pipeline\n               (fn [data]\n                 (map #(* % 2) data))\n               (fn [data]\n                 (map #(+ % 100) data)))]\n    \n    (doseq [seg (:segs @pipe)]\n      (pipe-seg-execute seg))\n\n    (pln :go!!!! (:in-data @(first (:steps pipe))))\n    (if (a/&gt;!! (:in-data @(first (:steps pipe))) [0 1 2])\n      (do\n        (pln :piped!)\n        (let [out (a/&lt;!! (:out-data (last (:steps pipe))))]\n          (assert (not (nil? out)))\n          (assert (= out [1 3 5])))))))&quot;, :offset 537, :ns &quot;example.micropipeline&quot;} {:command &quot;(do\n  (defn data-ack []\n    (cells-init)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-data @(first (:steps pipe))))\n      (if (a/&gt;!! (:in-data @(first (:steps pipe))) [0 1 2])\n        (do\n          (pln :piped!)\n          (let [out (a/&lt;!! (:out-data (last (:steps pipe))))]\n            (assert (not (nil? out)))\n            (assert (= out [1 3 5])))))))\n\n  (data-ack))&quot;, :offset 629, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-data @(first (:steps pipe))))\n      (if (a/&gt;!! (:in-data @(first (:steps pipe))) [0 1 2])\n        (do\n          (pln :piped!)\n          (let [out (a/&lt;!! (:out-data (last (:steps pipe))))]\n            (assert (not (nil? out)))\n            (assert (= out [1 3 5])))))))&quot;, :offset 608, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-data @(first (:steps pipe))))\n      (if (a/&gt;!! (:in-data @(first (:steps pipe))) [0 1 2])\n        (do\n          (pln :piped!)\n          (let [out (a/&lt;!! (:out-data (last (:steps pipe))))]\n            (assert (not (nil? out)))\n            (assert (= out [1 3 5])))))))&quot;, :offset 624, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! pipe)\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-data @(first (:steps pipe))))\n      (if (a/&gt;!! (:in-data @(first (:steps pipe))) [0 1 2])\n        (do\n          (pln :piped!)\n          (let [out (a/&lt;!! (:out-data (last (:steps pipe))))]\n            (assert (not (nil? out)))\n            (assert (= out [1 3 5])))))))&quot;, :offset 649, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-data @(first (:steps pipe))))\n      (if (a/&gt;!! (:in-data @(first (:steps pipe))) [0 1 2])\n        (do\n          (pln :piped!)\n          (let [out (a/&lt;!! (:out-data (last (:steps pipe))))]\n            (assert (not (nil? out)))\n            (assert (= out [1 3 5])))))))&quot;, :offset 682, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn pipe-seg-execute [stp]\n  ;; todo find and cache to-rq, to-indata, to-ak\n  (pln :go-seg!! @stp)\n  (a/go\n    (loop []\n      (when (a/&lt;! (:in-rq @stp))\n        ;; unlike h/w, rq goes out before data (or we would block on data and never see rq)\n        (let [d (a/&lt;! (:in-data @stp))]\n          (when (nil? d)\n            (pln :indata-closed-after-inrq!))\n\n          (when d\n            (pln :inakking)\n            (a/&gt;! (:in-ak stp) true) ;; make async put, or can we rely on them being waiting?\n            (pln :computing)\n            (let [d-out ((:process stp) d)]\n              (pln :computed-dout d-out)\n              (swap! stp :out-data d-out)\n              (recur)))))))\n\n  (a/close! (:in-data @stp))\n  (a/close! (:in-ak @stp))\n  ;; close out-rq to receiver if any\n  )&quot;, :offset 780, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n      (pln :go!!!! (first (:segs @pipe)))\n      (pln :go!!!! (:in-data @(first (:segs @pipe))))\n\n\n\n      (pln :go!!!! (:in-data @(first (:segs @pipe))))\n      (if (a/&gt;!! (:in-data @(first (:segs @pipe))) [0 1 2])\n        (do\n          (pln :piped!)\n          (let [out (a/&lt;!! (:out-data (last (:segs @pipe))))]\n            (assert (not (nil? out)))\n            (assert (= out [1 3 5])))))))&quot;, :offset 780, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n      (pln :go!!!! (first (:segs @pipe)))\n      (pln :go!!!! (:in-data @(first (:segs @pipe))))\n\n\n\n      (pln :go!!!! (:in-data @(first (:segs @pipe))))\n      (a/&gt;!! (:in-ack @(first (:segs @pipe))) true)\n      (if (a/&gt;!! (:in-data @(first (:segs @pipe))) [0 1 2])\n        (do\n          (pln :piped!)\n          (let [out (a/&lt;!! (:out-data (last (:segs @pipe))))]\n            (assert (not (nil? out)))\n            (assert (= out [1 3 5])))))))&quot;, :offset 832, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n      (pln :go!!!! (first (:segs @pipe)))\n      (pln :go!!!! (:in-data @(first (:segs @pipe))))\n\n\n\n      (pln :go!!!! (:in-data @(first (:segs @pipe))))\n      (a/&gt;!! (:in-rq @(first (:segs @pipe))) true)\n      (if (a/&gt;!! (:in-data @(first (:segs @pipe))) [0 1 2])\n        (do\n          (pln :piped!)\n          (let [out (a/&lt;!! (:out-data (last (:segs @pipe))))]\n            (assert (not (nil? out)))\n            (assert (= out [1 3 5])))))))&quot;, :offset 831, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n      (pln :go!!!! (first (:segs @pipe)))\n      (pln :go!!!! (:in-data @(first (:segs @pipe))))\n\n\n\n      (pln :go!!!! (:in-data @(first (:segs @pipe))))\n      (a/put! (:in-rq @(first (:segs @pipe))) true)\n      (pln :inrq-put!)\n      (if (a/&gt;!! (:in-data @(first (:segs @pipe))) [0 1 2])\n        (do\n          (pln :piped!)\n          (let [out (a/&lt;!! (:out-data (last (:segs @pipe))))]\n            (assert (not (nil? out)))\n            (assert (= out [1 3 5])))))))&quot;, :offset 855, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n      (pln :go!!!! (first (:segs @pipe)))\n      (pln :go!!!! (:in-data @(first (:segs @pipe))))\n\n\n\n      (pln :go!!!! (:in-data @(first (:segs @pipe))))\n      (a/put! (:in-rq @(first (:segs @pipe))) true)\n      (pln :inrq-put!)\n      (when (a/&gt;!! (:in-data @(first (:segs @pipe))) [0 1 2])\n          (pln :piped!)\n          (when (a/&lt;!! (:in-ack @(last (:segs @pipe)))))\n          (let [out (a/&lt;!! (:out-data @(last (:segs @pipe))))]\n            (assert (not (nil? out)))\n            (assert (= out [1 3 5]))))))&quot;, :offset 902, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn pipe-seg-execute [stp]\n  ;; todo find and cache to-rq, to-indata, to-ak\n  (pln :go-seg!! @stp)\n  (a/go\n    (loop []\n      (when (a/&lt;! (:in-rq @stp))\n        (pln :got-in-rq! (:id @stp))\n        (pln :reading (:in-data @stp))\n        ;; unlike h/w, rq goes out before data (or we would block on data and never see rq)\n        (let [d (a/&lt;! (:in-data @stp))]\n          (when (nil? d)\n            (pln :indata-closed-after-inrq!))\n\n          (when d\n            (pln :inakking d)\n            (pln :akking-to (:in-ak @stp))\n            (a/&gt;! (:in-ak @stp) true) ;; make async put, or can we rely on them being waiting?\n            (pln :computing (:processor @stp))\n            \n            (let [d-out ((:processor @stp) d)]\n              (pln :computed-dout d-out)\n              (a/&gt;! (:out-data @stp) d-out)\n              (pln :dout-sent d-out)\n              (recur))))))\n\n    (pln :closing-seg!!! (:id @stp))\n    (a/close! (:in-data @stp))\n    (a/close! (:in-ak @stp)))\n  ;; close out-rq to receiver if any\n  )&quot;, :offset 1016, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn pipe-seg-execute [stp]\n  ;; todo find and cache to-rq, to-indata, to-ak\n  (pln :go-seg!! @stp)\n  (a/go\n    (loop []\n      (when (a/&lt;! (:in-rq @stp))\n        (pln :got-in-rq! (:id @stp))\n        (pln :reading (:in-data @stp))\n        ;; unlike h/w, rq goes out before data (or we would block on data and never see rq)\n        (let [d (a/&lt;! (:in-data @stp))]\n          (when (nil? d)\n            (pln :indata-closed-after-inrq!))\n\n          (when d\n            (pln :inakking d)\n            (pln :akking-to (:in-ak @stp))\n            (a/&gt;! (:in-ak @stp) true) ;; make async put, or can we rely on them being waiting?\n            (pln :computing (:processor @stp))\n\n            (let [d-out ((:processor @stp) d)]\n              (pln :computed-dout d-out)\n              (pln :send-to (:out-data @stp))\n              (a/&gt;! (:out-data @stp) d-out)\n              (pln :dout-sent d-out)\n              (recur))))))\n\n    (pln :closing-seg!!! (:id @stp))\n    (a/close! (:in-data @stp))\n    (a/close! (:in-ak @stp)))\n  ;; close out-rq to receiver if any\n  )&quot;, :offset 1050, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-rq @(first (:segs @pipe))))\n\n      (a/put! (:in-rq @(first (:segs @pipe))) true)\n      (pln :inrq-put!)\n      (pln :indta-chan!!!! (:in-data @(first (:segs @pipe))))\n      (when (a/put! (:in-data @(first (:segs @pipe))) [0 1 2])\n          (pln :piped!)\n          (pln :reading-ack (:in-ak @(first (:segs @pipe))))\n\n          (let [ak (a/&lt;!! (:in-ak @(first (:segs @pipe))))]\n            (pln :got-ack!!! ak)\n            (pln :get-result (last (:segs @pipe))\n              (:out-data @(last (:segs @pipe))))\n            (a/take! (:out-data @(last (:segs @pipe))))\n\n            (let [tout (a/timeout 1000)\n                  bam (a/alt!\n                        tout :timeout\n                        (:out-data @(last (:segs @pipe))) :sent)]\n              (pln :bam-out bam)\n              ;(assert (not (nil? out)))\n              ;(assert (= out [1 3 5]))\n              (a/close! (:in-rq @(first (:segs @pipe))))\n              (pln :booya!!!!!!!!!! out))))))&quot;, :offset 1369, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-rq @(first (:segs @pipe))))\n\n      (a/put! (:in-rq @(first (:segs @pipe))) true)\n      (pln :inrq-put!)\n      (pln :indta-chan!!!! (:in-data @(first (:segs @pipe))))\n      (when (a/put! (:in-data @(first (:segs @pipe))) [0 1 2])\n          (pln :piped!)\n          (pln :reading-ack (:in-ak @(first (:segs @pipe))))\n\n          (let [ak (a/&lt;!! (:in-ak @(first (:segs @pipe))))]\n            (pln :got-ack!!! ak)\n            (pln :get-result (last (:segs @pipe))\n              (:out-data @(last (:segs @pipe))))\n            (a/take! (:out-data @(last (:segs @pipe))))\n\n            (let [tout (a/timeout 1000)\n                  bam (a/alt!\n                        tout :timeout\n                        (:out-data @(last (:segs @pipe))) :sent)]\n              (pln :bam-out bam)\n              ;(assert (not (nil? out)))\n              ;(assert (= out [1 3 5]))\n              (a/close! (:in-rq @(first (:segs @pipe))))\n              (pln :booya!!!!!!!!!! bam))))))&quot;, :offset 1369, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-rq @(first (:segs @pipe))))\n\n      (a/put! (:in-rq @(first (:segs @pipe))) true)\n      (pln :inrq-put!)\n      (pln :indta-chan!!!! (:in-data @(first (:segs @pipe))))\n      (when (a/put! (:in-data @(first (:segs @pipe))) [0 1 2])\n          (pln :piped!)\n          (pln :reading-ack (:in-ak @(first (:segs @pipe))))\n\n          (let [ak (a/&lt;!! (:in-ak @(first (:segs @pipe))))]\n            (pln :got-ack!!! ak)\n            (pln :get-result (last (:segs @pipe))\n              (:out-data @(last (:segs @pipe))))\n            \n\n            (let [tout (a/timeout 1000)\n                  bam (a/alt!\n                        tout :timeout\n                        (:out-data @(last (:segs @pipe))) :sent)]\n              (pln :bam-out bam)\n              ;(assert (not (nil? out)))\n              ;(assert (= out [1 3 5]))\n              (a/close! (:in-rq @(first (:segs @pipe))))\n              (pln :booya!!!!!!!!!! bam))))))&quot;, :offset 1326, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-rq @(first (:segs @pipe))))\n\n      (a/put! (:in-rq @(first (:segs @pipe))) true)\n      (pln :inrq-put!)\n      (pln :indta-chan!!!! (:in-data @(first (:segs @pipe))))\n      (when (a/put! (:in-data @(first (:segs @pipe))) [0 1 2])\n          (pln :piped!)\n          (pln :reading-ack (:in-ak @(first (:segs @pipe))))\n\n          (let [ak (a/&lt;!! (:in-ak @(first (:segs @pipe))))]\n            (pln :got-ack!!! ak)\n            (pln :get-result (last (:segs @pipe))\n              (:out-data @(last (:segs @pipe))))\n            \n\n            (go\n              (let [tout (a/timeout 1000)\n                  bam (a/alt!\n                        tout :timeout\n                        (:out-data @(last (:segs @pipe))) :sent)]\n              (pln :bam-out bam)\n              ;(assert (not (nil? out)))\n              ;(assert (= out [1 3 5]))\n              (a/close! (:in-rq @(first (:segs @pipe))))\n              (pln :booya!!!!!!!!!! bam)))))))&quot;, :offset 1345, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-rq @(first (:segs @pipe))))\n\n      (a/put! (:in-rq @(first (:segs @pipe))) true)\n      (pln :inrq-put!)\n      (pln :indta-chan!!!! (:in-data @(first (:segs @pipe))))\n      (when (a/put! (:in-data @(first (:segs @pipe))) [0 1 2])\n          (pln :piped!)\n          (pln :reading-ack (:in-ak @(first (:segs @pipe))))\n\n          (let [ak (a/&lt;!! (:in-ak @(first (:segs @pipe))))]\n            (pln :got-ack!!! ak)\n            (pln :get-result (last (:segs @pipe))\n              (:out-data @(last (:segs @pipe))))\n\n\n            (a/go\n              (let [tout (a/timeout 1000)\n                  bam (a/alt!\n                        tout :timeout\n                        (:out-data @(last (:segs @pipe))) :sent)]\n              (pln :bam-out bam)\n              ;(assert (not (nil? out)))\n              ;(assert (= out [1 3 5]))\n              (a/close! (:in-rq @(first (:segs @pipe))))\n              (pln :booya!!!!!!!!!! bam)))))))&quot;, :offset 1335, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 #_\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 1 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-rq @(first (:segs @pipe))))\n\n      (a/put! (:in-rq @(first (:segs @pipe))) true)\n      (pln :inrq-put!)\n      (pln :indta-chan!!!! (:in-data @(first (:segs @pipe))))\n      (when (a/put! (:in-data @(first (:segs @pipe))) [0 1 2])\n          (pln :piped!)\n          (pln :reading-ack (:in-ak @(first (:segs @pipe))))\n\n          (let [ak (a/&lt;!! (:in-ak @(first (:segs @pipe))))]\n            (pln :got-ack!!! ak)\n            (pln :get-result (last (:segs @pipe))\n              (:out-data @(last (:segs @pipe))))\n\n\n            (a/go\n              (let [tout (a/timeout 1000)\n                  bam (a/alt!\n                        tout :timeout\n                        (:out-data @(last (:segs @pipe))) :sent)]\n              (pln :bam-out bam)\n              ;(assert (not (nil? out)))\n              ;(assert (= out [1 3 5]))\n              (a/close! (:in-rq @(first (:segs @pipe))))\n              (pln :booya!!!!!!!!!! bam)))))))&quot;, :offset 1355, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 #_\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 1 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-rq @(first (:segs @pipe))))\n\n      (a/put! (:in-rq @(first (:segs @pipe))) true)\n      (pln :inrq-put!)\n      (pln :indta-chan!!!! (:in-data @(first (:segs @pipe))))\n      (when (a/put! (:in-data @(first (:segs @pipe))) [0 1 2])\n          (pln :piped!)\n          (pln :reading-ack (:in-ak @(first (:segs @pipe))))\n\n          (let [ak (a/&lt;!! (:in-ak @(first (:segs @pipe))))]\n            (pln :got-ack!!! ak)\n            (pln :get-result (last (:segs @pipe))\n              (:out-data @(last (:segs @pipe))))\n\n\n            (a/go\n              (let [tout (a/timeout 1000)\n                  bam (a/alt!\n                        tout :timeout\n                        (:out-data @(last (:segs @pipe)))\n                        ([r] r))]\n              (pln :bam-out bam)\n              ;(assert (not (nil? out)))\n              ;(assert (= out [1 3 5]))\n              (a/close! (:in-rq @(first (:segs @pipe))))\n              (pln :booya!!!!!!!!!! bam)))))))&quot;, :offset 1381, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn make-pipeline [in-chan out-chan &amp; processors]\n  (md/make ::pipeline\n    :in-data in-chan\n    :out-data out-chan\n    :segs (cF (let [id (atom -1)\n                    next-seg (atom nil)]\n                (for [proc processors]\n                  (swap! next-seg\n                    (make-pipe-seg me\n                      (swap! id inc)\n                      (if (zero? id)\n                        in-chan (a/chan))\n                      (if (= id (dec (count processors)))\n                        out-chan (a/chan))\n                      proc @next-seg)))))))&quot;, :offset 563, :ns &quot;example.micropipeline&quot;} {:command &quot;(doseq [[a b] [1 2 3]]\n  (pln a b))&quot;, :offset 35, :ns &quot;example.micropipeline&quot;} {:command &quot;(let [d [1 2 3]]\n  (map vec d (rest d)))&quot;, :offset 40, :ns &quot;example.micropipeline&quot;} {:command &quot;(let [d [1 2 3]]\n  (map vector d (rest d)))&quot;, :offset 43, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn make-pipeline [in-chan out-chan &amp; processors]\n  (md/make ::pipeline\n    :in-data in-chan\n    :out-data out-chan\n    :segs (cF (let [id (atom -1)]\n                (into (i/int-map)\n                  (for [proc processors\n                        :let [id (swap! id inc)]]\n                    [id (make-pipe-seg me (swap! id inc) proc)]))))))&quot;, :offset 345, :ns &quot;example.micropipeline&quot;} {:command &quot;(into (i/int-map) [[1 'a][2 'b]])&quot;, :offset 33, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn make-pipeline [in-chan out-chan processors]\n  (md/make ::pipeline\n    :in-data in-chan\n    :out-data out-chan\n    :segs (cF (let [id (atom -1)]\n                (into (i/int-map)\n                  (dorun\n                    (for [proc processors\n                        :let [id (swap! id inc)]]\n                    [id (make-pipe-seg me id proc)])))))))&quot;, :offset 359, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn make-pipe-seg [pipe id processor]\n  (pln :make-seg id)\n  (md/make ::pipeseg\n    :pipe pipe\n    :id id\n    :processor processor\n    :in-rq (a/chan)\n    :in-data (a/chan)\n    :in-ak (a/chan)))&quot;, :offset 196, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn make-pipeline [in-chan out-chan processors]\n  (md/make ::pipeline\n    :in-data in-chan\n    :out-data out-chan\n    :segs (cF (let [ida (atom -1)]\n                (into (i/int-map)\n                  (dorun\n                    (for [proc processors\n                        :let [id (swap! ida inc)]]\n                    [id (make-pipe-seg me id proc)])))))))&quot;, :offset 361, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn make-pipeline [in-chan out-chan processors]\n  (pln :porcs (count processors))\n  (md/make ::pipeline\n    :in-data in-chan\n    :out-data out-chan\n    :segs (cF (let [ida (atom -1)\n                    segs (dorun\n                           (for [proc processors\n                                 :let [id (swap! ida inc)]]\n                             [id (make-pipe-seg me id proc)]))]\n                (println :isegs segs)\n                (into (i/int-map) segs)))))&quot;, :offset 470, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn make-pipeline [in-chan out-chan processors]\n  (pln :porcs (count processors))\n  (md/make ::pipeline\n    :in-data in-chan\n    :out-data out-chan\n    :segs (cF (let [ida (atom -1)\n                    segs (do\n                           (for [proc processors\n                                 :let [id (swap! ida inc)]]\n                             [id (make-pipe-seg me id proc)]))]\n                (println :isegs segs)\n                (into (i/int-map) segs)))))&quot;, :offset 467, :ns &quot;example.micropipeline&quot;} {:command &quot;(for [i [1 2]]\n  [i (+ 10 i)])&quot;, :offset 30, :ns &quot;example.micropipeline&quot;} {:command &quot;(do (for [i [1 2]]\n      [i (+ 10 i)]))&quot;, :offset 39, :ns &quot;example.micropipeline&quot;} {:command &quot;(into (i/int-map)\n  (for [i [1 2]]\n      [i (+ 10 i)]))&quot;, :offset 55, :ns &quot;example.micropipeline&quot;} {:command &quot;(into (i/int-map)\n  (for [i [1 2]\n        :let [t2 (* 2 i)]]\n      [i t2]))&quot;, :offset 75, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn make-pipe-seg [pipe id processor]\n  ;;(pln :make-seg id pipe)\n  (md/make ::pipeseg\n    :pipe pipe\n    :id id\n    :processor processor\n    :in-rq (a/chan)\n    :in-data (a/chan)\n    :in-ak (a/chan)))&quot;, :offset 203, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn make-pipeline [in-chan out-chan processors]\n  (pln :porcs (count processors))\n  (md/make ::pipeline\n    :in-data in-chan\n    :out-data out-chan\n    :segs (let [ida (atom -1)\n                    segs (do\n                           (for [proc processors\n                                 :let [id (swap! ida inc)]]\n                             [id (make-pipe-seg me id proc)]))]\n                (println :isegs segs)\n                (let [im (into (i/int-map) segs)]\n                  (pln :im im)\n                  im))))&quot;, :offset 525, :ns &quot;example.micropipeline&quot;} {:command &quot;(let [ns (for [i [1 2]\n               :let [t2 (* 2 i)]]\n           [i t2])]\n  (into (i/int-map) ns))&quot;, :offset 101, :ns &quot;example.micropipeline&quot;} {:command &quot;(let [ns (for [i [1 2]\n               :let [t2 (* 2 i)]]\n           [i t2])]\n  (into {} ns))&quot;, :offset 92, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn make-pipeline [in-chan out-chan processors]\n  (pln :porcs (count processors))\n  (md/make ::pipeline\n    :in-data in-chan\n    :out-data out-chan\n    :segs (cF (let [ida (atom -1)\n                    segs (do\n                           (for [proc processors\n                                 :let [id (swap! ida inc)]]\n                             [id (make-pipe-seg me id proc)]))]\n                (println :isegs segs)\n                (let [im (into {} segs)]\n                  (pln :im im)\n                  im)))))&quot;, :offset 521, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn make [&amp; arg-list]\n  (cond\n    (odd? (count arg-list)) (apply make :type arg-list)\n    :else\n    (#?(:clj dosync :cljs do)\n     ;;(println :md-making (nth arg-list 1))\n      \n     (let [iargs (apply hash-map arg-list)\n           me (#?(:clj ref :cljs atom)\n               (merge {:par *par*}\n                      (-&gt;&gt; arg-list\n                           (partition 2)\n                           (filter (fn [[slot v]]\n                                     (not (= :type slot))))\n                           (map (fn [[k v]]\n                                  (vector k (if (c-ref? v)\n                                              unbound\n                                              v))))\n                           (into {})))\n               :meta (merge\n                       {:state :nascent}\n                       (select-keys iargs [:type])))]\n       (assert (meta me))\n        #_(when-not (:par @me)\n          (println :no-par!!!! me))\n       (rmap-meta-setf\n        [:cz me]\n        (-&gt;&gt; arg-list\n             (partition 2)\n             (filter (fn [[slot v]]\n                       (md-install-cell me slot v)))\n             (map vec)\n             (into {})))\n\n       (with-integrity (:awaken me)\n        (md-awaken me)\n        (println :md-awaken-complete))\n       me))))&quot;, :offset 1286, :ns &quot;tiltontec.model.core&quot;} {:command &quot;(defn md-awaken\n  \&quot;(1) do initial evaluation of all ruled slots\n   (2) call observers of all slots\&quot;\n  [me]\n  (assert me \&quot;md-awaken passed nil\&quot;)\n  (println :md-awaken!!!!!!!!)\n  (md-awaken-before me)\n  (c-assert (= :nascent (md-state me)))\n  (rmap-meta-setf [:state me] :awakening)\n  (doall\n   (for [slot (keys @me)]\n     ;; next is tricky: if slot is in :cz but nil, it has been \n     ;; optimized-away and observed then in the rare case\n     ;; it gets optimized away on other than the initial\n     ;; value.\n     (when-let [c (slot (md-cz me) :not-found)]\n       (cond\n         (= c :not-found)\n         ;; these need at least an initial observe\n         (do (when (and (= slot :kids)(slot @me))\n               (pme :md-awaken-kids-nocz-nonnil-obs slot\n                 (keys (md-cz me))\n                 (:kids (md-cz me) :hunh))\n               )\n             (observe slot me (slot @me) unbound nil))\n         :else (do\n                 (pme :md-awaken-awks-cell slot)\n                 (c-awaken c)\n                 (pme :md-awakened-awks-cell slot)) ))))\n  (rmap-meta-setf [:state me] :awake)\n  me)&quot;, :offset 1103, :ns &quot;tiltontec.model.base&quot;} {:command &quot;(defn calculate-and-set\n  \&quot;Calculate, link, record, and propagate.\&quot;\n  [c dbgid dbgdata]\n  (do                                                       ;; (wtrx [0 20 :cnset-entry (c-slot c)]\n    (let [[raw-value propagation-code] (calculate-and-link c)]\n      ;;(trx :cn-set-sees!!!! (c-slot c) raw-value propagation-code)\n      (when-not (c-optimized-away? c)\n        (assert (map? @c) \&quot;calc-n-set\&quot;)\n\n        ;; this check for optimized-away? arose because a rule using without-c-dependency\n        ;; can be re-entered unnoticed since that clears *call-stack*. If re-entered, a subsequent\n        ;; re-exit will be of an optimized away cell, which will have been assumed\n        ;; as part of the opti-away processing.\n        (trx :calc-n-set-&gt;assume raw-value)\n        (c-value-assume c raw-value propagation-code)))))&quot;, :offset 820, :ns &quot;tiltontec.cell.evaluate&quot;} {:command &quot;(get (into (i/int-map) [[1 'a][2 'b]]) 2)&quot;, :offset 41, :ns &quot;example.micropipeline&quot;} {:command &quot;(data-ack)&quot;, :offset 10, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn c-optimized-away? [c]\n  (trx :opti? (:state @c))\n  (trx :opti? (c-ref? c))\n  (trx :opti? (map? @c))\n  (trx :opt (= :optimized-away (:state @c)))\n  (cond\n    (c-ref? c) (or (not (map? @c))\n                   (= :optimized-away (:state @c)))\n    :else true))&quot;, :offset 262, :ns &quot;tiltontec.cell.base&quot;} {:command &quot;(defn c-optimized-away? [c]\n  (trx :opti? (:state @c))\n  (trx :opti? (c-ref? c))\n  (trx :opti? (map? @c))\n  (trx :opt (= :optimized-away (:state @c)))\n  (trx :optval (:value @c))\n  (cond\n    (c-ref? c) (or (not (map? @c))\n                   (= :optimized-away (:state @c)))\n    :else true))&quot;, :offset 290, :ns &quot;tiltontec.cell.base&quot;} {:command &quot;(defn make-pipeline [in-chan out-chan processors]\n  (pln :porcs (count processors))\n  (md/make ::md/family\n    :in-data in-chan\n    :out-data out-chan\n    :kids (cF (the-kids\n                (let [ida (atom -1)]\n                (for [proc processors\n                      :let [id (swap! ida inc)]]\n                  (make-pipe-seg me id proc)))))\n\n    :seg-id-map (cF (let [raw (for [seg (&lt;mget me :kids)]\n                                [(pseg-id seg) seg])]\n                      (pln :rawsegs raw)\n                      (into {} raw)))))&quot;, :offset 541, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn c-debug [c tag]\n  (when-not (integer? (c-pulse-observed c))\n    (trx :c-ref? (c-ref? c))\n    (trx :c-bebug-bad-pulse-obs tag (c-slot c) @c)\n    (trx :state (:state @c) :val (:value @c))\n    (trx :slot-pulse (:slot @c) (:pulse @c) (keys @c))\n    (assert false)))&quot;, :offset 267, :ns &quot;tiltontec.cell.base&quot;} {:command &quot;(defn c-optimized-away? [c]\n  (trx :opti-state? (::state @c)(contains? @c ::state))\n  (trx :opti-ref? (c-ref? c))\n  (trx :opti-meta (meta c))\n\n  (cond\n    (c-ref? c) (or (not (map? @c))\n                 (not (contains? @c ::state))\n                   (= :optimized-away (::state @c)))\n    :else true))&quot;, :offset 301, :ns &quot;tiltontec.cell.base&quot;} {:command &quot;(defn c-optimized-away? [c]\n  (trx :opti-state? (::state @c))\n  (trx :opti-ref? (c-ref? c))\n  (trx :opti-meta (meta c))\n\n  (cond\n    (c-ref? c) (or (not (map? @c))\n                 (not (contains? @c ::state))\n                   (= :optimized-away (::state @c)))\n    :else true))&quot;, :offset 279, :ns &quot;tiltontec.cell.base&quot;} {:command &quot;(deftest data-ack-test\n  (cells-init)\n  (pln :cinit!)\n  (let [procs [(fn [data]\n                 (map #(* % 2) data))\n\n               (fn [data]\n                 (map #(+ % 100) data))\n\n               (fn [data]\n                 (map #(- %) data))]\n        pipe-in (a/chan)\n        pipe-out (a/chan)\n        pipe (make-pipeline\n               pipe-in pipe-out\n               procs)]\n\n    (pln :gotpipe!!! pipe)\n    (is (= (count procs)\n          (count (pipe-segs pipe))))\n\n    (pln :strt-pipe pipe)\n\n    (pipe-start pipe)\n\n    (a/go\n      (a/put! pipe-in [0 1 2])\n      (a/put! pipe-in [1000 2000 3000]))\n\n    (a/go\n      (loop []\n        (let [tout (a/timeout 1000)\n              result (a/alt!\n                       tout :timeout\n                       pipe-out\n                       ([r] r))]\n          (pln :bam-out result)\n          ;(assert (not (nil? out)))\n          (when (not= result :timeout)\n            (is (or (= [[100 102 104]\n                        [2100 4100 6100]])))\n            (recur))))\n      #_ (do\n           (a/close! pipe-in)\n           (a/close! pipe-out)))))&quot;, :offset 1090, :ns &quot;example.micropipeline-test&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.Unnamed">
    <configuration name="Unnamed" type="ClojureREPL" factoryName="Local">
      <setting name="replType" value="1" />
      <module name="matrix" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
    </configuration>
    <configuration default="true" type="Applet" factoryName="Applet">
      <option name="HTML_USED" value="false" />
      <option name="WIDTH" value="400" />
      <option name="HEIGHT" value="300" />
      <option name="POLICY_FILE" value="$APPLICATION_HOME_DIR$/bin/appletviewer.policy" />
      <module />
    </configuration>
    <configuration default="true" type="Application" factoryName="Application">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <option name="MAIN_CLASS_NAME" />
      <option name="VM_PARAMETERS" />
      <option name="PROGRAM_PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="ENABLE_SWING_INSPECTOR" value="false" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <module name="" />
      <envs />
    </configuration>
    <configuration default="true" type="JUnit" factoryName="JUnit">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <module name="" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="PACKAGE_NAME" />
      <option name="MAIN_CLASS_NAME" />
      <option name="METHOD_NAME" />
      <option name="TEST_OBJECT" value="class" />
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="$MODULE_DIR$" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="singleModule" />
      </option>
      <envs />
      <patterns />
    </configuration>
    <configuration default="true" type="#org.jetbrains.idea.devkit.run.PluginConfigurationType" factoryName="Plugin">
      <module name="" />
      <option name="VM_PARAMETERS" value="-Xmx512m -Xms256m -XX:MaxPermSize=250m -ea" />
      <option name="PROGRAM_PARAMETERS" />
      <predefined_log_file id="idea.log" enabled="true" />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
    </configuration>
    <configuration default="true" type="TestNG" factoryName="TestNG">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <module name="" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="SUITE_NAME" />
      <option name="PACKAGE_NAME" />
      <option name="MAIN_CLASS_NAME" />
      <option name="METHOD_NAME" />
      <option name="GROUP_NAME" />
      <option name="TEST_OBJECT" value="CLASS" />
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="$MODULE_DIR$" />
      <option name="OUTPUT_DIRECTORY" />
      <option name="ANNOTATION_TYPE" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="singleModule" />
      </option>
      <option name="USE_DEFAULT_REPORTERS" value="false" />
      <option name="PROPERTIES_FILE" />
      <envs />
      <properties />
      <listeners />
    </configuration>
  </component>
  <component name="ShelveChangesManager" show_recycled="false">
    <option name="remove_strategy" value="false" />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="d6f74870-5b99-473b-b2b2-5bc6dd670308" name="Default" comment="" />
      <created>1517165659858</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1517165659858</updated>
    </task>
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="138" y="68" width="1494" height="886" extended-state="0" />
    <editor active="true" />
    <layout>
      <window_info id="TODO" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
      <window_info id="Palette&#9;" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Image Layers" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Capture Analysis" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="Event Log" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="true" content_ui="tabs" />
      <window_info id="Maven Projects" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
      <window_info id="REPL" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.2824632" sideWeight="0.5" order="8" side_tool="true" content_ui="tabs" />
      <window_info id="Run" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Version Control" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="false" weight="0.33" sideWeight="0.5" order="8" side_tool="false" content_ui="tabs" />
      <window_info id="Leiningen" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
      <window_info id="Terminal" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="9" side_tool="false" content_ui="tabs" />
      <window_info id="Capture Tool" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Project" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.17068273" sideWeight="0.5" order="0" side_tool="false" content_ui="combo" />
      <window_info id="Find" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32996207" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Structure" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Ant Build" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Theme Preview" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Debug" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.39949432" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Favorites" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="true" content_ui="tabs" />
      <window_info id="Cvs" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="Message" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Commander" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Hierarchy" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="2" side_tool="false" content_ui="combo" />
      <window_info id="Inspection" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
    </layout>
    <layout-to-restore>
      <window_info id="Cvs" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="Message" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Commander" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Event Log" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="true" content_ui="tabs" />
      <window_info id="Maven Projects" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
      <window_info id="REPL" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.30455154" sideWeight="0.5" order="8" side_tool="true" content_ui="tabs" />
      <window_info id="Leiningen" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
      <window_info id="Capture Tool" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Hierarchy" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="2" side_tool="false" content_ui="combo" />
      <window_info id="Structure" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Ant Build" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Debug" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="TODO" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
      <window_info id="Palette&#9;" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Image Layers" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="Capture Analysis" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="Inspection" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
      <window_info id="Run" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Version Control" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="false" weight="0.33" sideWeight="0.5" order="8" side_tool="false" content_ui="tabs" />
      <window_info id="Terminal" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="9" side_tool="false" content_ui="tabs" />
      <window_info id="Project" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.17068273" sideWeight="0.5" order="0" side_tool="false" content_ui="combo" />
      <window_info id="Find" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32996207" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Theme Preview" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Favorites" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="5" side_tool="true" content_ui="tabs" />
    </layout-to-restore>
  </component>
  <component name="VcsContentAnnotationSettings">
    <option name="myLimit" value="2678400000" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <option name="time" value="2" />
    </breakpoint-manager>
    <watches-manager />
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/src/tiltontec/model/base.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="561">
          <caret line="33" column="21" lean-forward="false" selection-start-line="33" selection-start-column="21" selection-end-line="33" selection-end-column="21" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/cell/observer.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="51">
          <caret line="3" column="24" lean-forward="false" selection-start-line="3" selection-start-column="24" selection-end-line="3" selection-end-column="24" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/util/base.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1360">
          <caret line="80" column="6" lean-forward="false" selection-start-line="80" selection-start-column="6" selection-end-line="80" selection-end-column="6" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/model/core.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="578">
          <caret line="34" column="21" lean-forward="false" selection-start-line="34" selection-start-column="21" selection-end-line="34" selection-end-column="21" />
          <folding>
            <marker date="1521202895597" expanded="true" signature="3489:4809" ph="(defn make ...)" />
            <marker date="1521202895597" expanded="true" signature="4949:5172" ph="(defmethod observe ...)" />
            <marker date="1521202895597" expanded="true" signature="5174:5460" ph="(defmethod not-to-be ...)" />
            <marker date="1521202895597" expanded="true" signature="5462:5493" ph="(defn mx-par ...)" />
            <marker date="1521202895597" expanded="true" signature="5495:6200" ph="(defn fget= ...)" />
            <marker date="1521202895597" expanded="true" signature="6202:6732" ph="(defn fasc ...)" />
            <marker date="1521202895597" expanded="true" signature="6734:6923" ph="(defn nextsib ...)" />
            <marker date="1521202895597" expanded="true" signature="6925:7169" ph="(defn prevsib ...)" />
            <marker date="1521202895597" expanded="true" signature="7171:8860" ph="(defn fget ...)" />
            <marker date="1521202895597" expanded="true" signature="8862:8952" ph="(defn fm! ...)" />
            <marker date="1521202895597" expanded="true" signature="8954:9070" ph="(defmacro mdv! ...)" />
            <marker date="1521202895597" expanded="true" signature="9072:9257" ph="(defn mxu-find-name ...)" />
            <marker date="1521202895597" expanded="true" signature="9259:9443" ph="(defn mxu-find-type ...)" />
            <marker date="1521202895597" expanded="true" signature="9445:9590" ph="(defn fmi-w-class ...)" />
            <marker date="1521202895597" expanded="true" signature="9592:9816" ph="(defn mxi-find ...)" />
            <marker date="1521202895597" expanded="true" signature="9818:9991" ph="(defmacro the-kids ...)" />
            <marker date="1521202895597" expanded="true" signature="9993:10131" ph="(defmacro cFkids ...)" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/cell/base.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="2380">
          <caret line="140" column="23" lean-forward="false" selection-start-line="140" selection-start-column="23" selection-end-line="140" selection-end-column="23" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="442">
          <caret line="26" column="73" lean-forward="false" selection-start-line="26" selection-start-column="73" selection-end-line="26" selection-end-column="73" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/cell/core.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="238">
          <caret line="14" column="33" lean-forward="false" selection-start-line="14" selection-start-column="33" selection-end-line="14" selection-end-column="33" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/cell/evaluate.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="6137">
          <caret line="361" column="19" lean-forward="false" selection-start-line="361" selection-start-column="19" selection-end-line="361" selection-end-column="19" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/cell/synapse.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="493">
          <caret line="29" column="22" lean-forward="false" selection-start-line="29" selection-start-column="22" selection-end-line="29" selection-end-column="22" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/model/base.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="561">
          <caret line="33" column="21" lean-forward="false" selection-start-line="33" selection-start-column="21" selection-end-line="33" selection-end-column="21" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/cell/observer.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="51">
          <caret line="3" column="24" lean-forward="false" selection-start-line="3" selection-start-column="24" selection-end-line="3" selection-end-column="24" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/util/base.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1360">
          <caret line="80" column="6" lean-forward="false" selection-start-line="80" selection-start-column="6" selection-end-line="80" selection-end-column="6" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/model/core.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="578">
          <caret line="34" column="21" lean-forward="false" selection-start-line="34" selection-start-column="21" selection-end-line="34" selection-end-column="21" />
          <folding>
            <marker date="1521202895597" expanded="true" signature="3489:4809" ph="(defn make ...)" />
            <marker date="1521202895597" expanded="true" signature="4949:5172" ph="(defmethod observe ...)" />
            <marker date="1521202895597" expanded="true" signature="5174:5460" ph="(defmethod not-to-be ...)" />
            <marker date="1521202895597" expanded="true" signature="5462:5493" ph="(defn mx-par ...)" />
            <marker date="1521202895597" expanded="true" signature="5495:6200" ph="(defn fget= ...)" />
            <marker date="1521202895597" expanded="true" signature="6202:6732" ph="(defn fasc ...)" />
            <marker date="1521202895597" expanded="true" signature="6734:6923" ph="(defn nextsib ...)" />
            <marker date="1521202895597" expanded="true" signature="6925:7169" ph="(defn prevsib ...)" />
            <marker date="1521202895597" expanded="true" signature="7171:8860" ph="(defn fget ...)" />
            <marker date="1521202895597" expanded="true" signature="8862:8952" ph="(defn fm! ...)" />
            <marker date="1521202895597" expanded="true" signature="8954:9070" ph="(defmacro mdv! ...)" />
            <marker date="1521202895597" expanded="true" signature="9072:9257" ph="(defn mxu-find-name ...)" />
            <marker date="1521202895597" expanded="true" signature="9259:9443" ph="(defn mxu-find-type ...)" />
            <marker date="1521202895597" expanded="true" signature="9445:9590" ph="(defn fmi-w-class ...)" />
            <marker date="1521202895597" expanded="true" signature="9592:9816" ph="(defn mxi-find ...)" />
            <marker date="1521202895597" expanded="true" signature="9818:9991" ph="(defmacro the-kids ...)" />
            <marker date="1521202895597" expanded="true" signature="9993:10131" ph="(defmacro cFkids ...)" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/cell/base.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="2380">
          <caret line="140" column="23" lean-forward="false" selection-start-line="140" selection-start-column="23" selection-end-line="140" selection-end-column="23" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="442">
          <caret line="26" column="73" lean-forward="false" selection-start-line="26" selection-start-column="73" selection-end-line="26" selection-end-column="73" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/tiltontec/util/core_test.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="210">
          <caret line="14" column="20" lean-forward="false" selection-start-line="14" selection-start-column="20" selection-end-line="14" selection-end-column="20" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/tiltontec/cell/core_test.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/cell/synapse.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="660">
          <caret line="44" column="50" lean-forward="false" selection-start-line="44" selection-start-column="50" selection-end-line="44" selection-end-column="50" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/model/core.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="3060">
          <caret line="204" column="0" lean-forward="true" selection-start-line="204" selection-start-column="0" selection-end-line="204" selection-end-column="0" />
          <folding>
            <marker date="1521202895597" expanded="true" signature="3489:4809" ph="(defn make ...)" />
            <marker date="1521202895597" expanded="true" signature="4949:5172" ph="(defmethod observe ...)" />
            <marker date="1521202895597" expanded="true" signature="5174:5460" ph="(defmethod not-to-be ...)" />
            <marker date="1521202895597" expanded="true" signature="5462:5493" ph="(defn mx-par ...)" />
            <marker date="1521202895597" expanded="true" signature="5495:6200" ph="(defn fget= ...)" />
            <marker date="1521202895597" expanded="true" signature="6202:6732" ph="(defn fasc ...)" />
            <marker date="1521202895597" expanded="true" signature="6734:6923" ph="(defn nextsib ...)" />
            <marker date="1521202895597" expanded="true" signature="6925:7169" ph="(defn prevsib ...)" />
            <marker date="1521202895597" expanded="true" signature="7171:8860" ph="(defn fget ...)" />
            <marker date="1521202895597" expanded="true" signature="8862:8952" ph="(defn fm! ...)" />
            <marker date="1521202895597" expanded="true" signature="8954:9070" ph="(defmacro mdv! ...)" />
            <marker date="1521202895597" expanded="true" signature="9072:9257" ph="(defn mxu-find-name ...)" />
            <marker date="1521202895597" expanded="true" signature="9259:9443" ph="(defn mxu-find-type ...)" />
            <marker date="1521202895597" expanded="true" signature="9445:9590" ph="(defn fmi-w-class ...)" />
            <marker date="1521202895597" expanded="true" signature="9592:9816" ph="(defn mxi-find ...)" />
            <marker date="1521202895597" expanded="true" signature="9818:9991" ph="(defmacro the-kids ...)" />
            <marker date="1521202895597" expanded="true" signature="9993:10131" ph="(defmacro cFkids ...)" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/tiltontec/util/core_test.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="210">
          <caret line="14" column="20" lean-forward="false" selection-start-line="14" selection-start-column="20" selection-end-line="14" selection-end-column="20" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/tiltontec/cell/core_test.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/cell/synapse.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="660">
          <caret line="44" column="50" lean-forward="false" selection-start-line="44" selection-start-column="50" selection-end-line="44" selection-end-column="50" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/tiltontec/util/core_test.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="210">
          <caret line="14" column="20" lean-forward="false" selection-start-line="14" selection-start-column="20" selection-end-line="14" selection-end-column="20" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/tiltontec/cell/core_test.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/cell/synapse.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="660">
          <caret line="44" column="50" lean-forward="false" selection-start-line="44" selection-start-column="50" selection-end-line="44" selection-end-column="50" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/tiltontec/util/core_test.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="210">
          <caret line="14" column="20" lean-forward="false" selection-start-line="14" selection-start-column="20" selection-end-line="14" selection-end-column="20" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/tiltontec/cell/core_test.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/tiltontec/util/core_test.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="14" column="20" lean-forward="false" selection-start-line="14" selection-start-column="20" selection-end-line="14" selection-end-column="20" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/tiltontec/cell/core_test.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/util/base.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1360">
          <caret line="80" column="6" lean-forward="false" selection-start-line="80" selection-start-column="6" selection-end-line="80" selection-end-column="6" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/example/micropipeline.cljs" />
    <entry file="file://$PROJECT_DIR$/test/testrun.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/example/micropipeline.cljc" />
    <entry file="file://$PROJECT_DIR$/test/example/micropipeline_test.cljc" />
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/core.async/0.2.374/core.async-0.2.374.jar!/clojure/core/async.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="249">
          <caret line="116" column="6" lean-forward="false" selection-start-line="116" selection-start-column="6" selection-end-line="116" selection-end-column="6" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/model/macros.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="68">
          <caret line="4" column="10" lean-forward="false" selection-start-line="4" selection-start-column="10" selection-end-line="4" selection-end-column="10" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/tiltontec/model/kids_test.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="110">
          <caret line="40" column="52" lean-forward="false" selection-start-line="40" selection-start-column="11" selection-end-line="40" selection-end-column="52" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/cell/core.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="230">
          <caret line="71" column="48" lean-forward="false" selection-start-line="71" selection-start-column="48" selection-end-line="71" selection-end-column="48" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/cell/integrity.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-57">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/cell/observer.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-57">
          <caret line="0" column="14" lean-forward="false" selection-start-line="0" selection-start-column="14" selection-end-line="0" selection-end-column="14" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/cell/synapse.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="390">
          <caret line="46" column="15" lean-forward="false" selection-start-line="46" selection-start-column="15" selection-end-line="46" selection-end-column="15" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/example/micropipeline.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="111">
          <caret line="78" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="127" selection-end-column="31" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/example/pipeline/cljc.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="51">
          <caret line="3" column="14" lean-forward="false" selection-start-line="3" selection-start-column="14" selection-end-line="3" selection-end-column="14" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/example/micropipeline_test.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="474">
          <caret line="44" column="28" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="58" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/cell/base.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="615">
          <caret line="231" column="22" lean-forward="false" selection-start-line="231" selection-start-column="22" selection-end-line="231" selection-end-column="22" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/model/core.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="80">
          <caret line="110" column="29" lean-forward="false" selection-start-line="110" selection-start-column="29" selection-end-line="110" selection-end-column="29" />
          <folding>
            <marker date="1521202895597" expanded="true" signature="3489:4809" ph="(defn make ...)" />
            <marker date="1521202895597" expanded="true" signature="4949:5172" ph="(defmethod observe ...)" />
            <marker date="1521202895597" expanded="true" signature="5174:5460" ph="(defmethod not-to-be ...)" />
            <marker date="1521202895597" expanded="true" signature="5462:5493" ph="(defn mx-par ...)" />
            <marker date="1521202895597" expanded="true" signature="5495:6200" ph="(defn fget= ...)" />
            <marker date="1521202895597" expanded="true" signature="6202:6732" ph="(defn fasc ...)" />
            <marker date="1521202895597" expanded="true" signature="6734:6923" ph="(defn nextsib ...)" />
            <marker date="1521202895597" expanded="true" signature="6925:7169" ph="(defn prevsib ...)" />
            <marker date="1521202895597" expanded="true" signature="7171:8860" ph="(defn fget ...)" />
            <marker date="1521202895597" expanded="true" signature="8862:8952" ph="(defn fm! ...)" />
            <marker date="1521202895597" expanded="true" signature="8954:9070" ph="(defmacro mdv! ...)" />
            <marker date="1521202895597" expanded="true" signature="9072:9257" ph="(defn mxu-find-name ...)" />
            <marker date="1521202895597" expanded="true" signature="9259:9443" ph="(defn mxu-find-type ...)" />
            <marker date="1521202895597" expanded="true" signature="9445:9590" ph="(defn fmi-w-class ...)" />
            <marker date="1521202895597" expanded="true" signature="9592:9816" ph="(defn mxi-find ...)" />
            <marker date="1521202895597" expanded="true" signature="9818:9991" ph="(defmacro the-kids ...)" />
            <marker date="1521202895597" expanded="true" signature="9993:10131" ph="(defmacro cFkids ...)" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="153">
          <caret line="9" column="51" lean-forward="false" selection-start-line="9" selection-start-column="51" selection-end-line="9" selection-end-column="51" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/model/base.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="406">
          <caret line="95" column="15" lean-forward="false" selection-start-line="95" selection-start-column="15" selection-end-line="95" selection-end-column="15" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/tiltontec/cell/evaluate.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="296">
          <caret line="324" column="26" lean-forward="false" selection-start-line="324" selection-start-column="26" selection-end-line="324" selection-end-column="26" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/example/pipeline_test.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="368">
          <caret line="31" column="22" lean-forward="true" selection-start-line="31" selection-start-column="22" selection-end-line="31" selection-end-column="22" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/example/pipeline.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1353">
          <caret line="101" column="2" lean-forward="false" selection-start-line="101" selection-start-column="2" selection-end-line="101" selection-end-column="2" />
          <folding />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>1.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>matrix</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
                <option value="0.6" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectJDKs.UI">
        <settings>
          <last-edited>1.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Leiningen: clojure-complete:0.2.4</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>