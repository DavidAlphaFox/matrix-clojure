<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="d6f74870-5b99-473b-b2b2-5bc6dd670308" name="Default" comment="" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="ClojureScript Namespace" />
        <option value="Clojure Test Namespace" />
        <option value="CLJC Test Namespace" />
        <option value="Clojure Namespace" />
        <option value="CLJC Namespace" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/../.." />
  </component>
  <component name="GitSEFilterConfiguration">
    <file-type-list>
      <filtered-out-file-type name="LOCAL_BRANCH" />
      <filtered-out-file-type name="REMOTE_BRANCH" />
      <filtered-out-file-type name="TAG" />
      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
    </file-type-list>
  </component>
  <component name="ProjectId" id="1VRFZR5CIqXrhd9qQ45ItjKTZlF" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
    <option name="showMembers" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="ASKED_ADD_EXTERNAL_FILES" value="true" />
    <property name="cursive.last.file.extension./Users/kennethtilton/matrix/cljs/matrix/src" value="cljc" />
    <property name="cursive.last.file.extension./Users/kennethtilton/matrix/cljs/matrix/test" value="cljc" />
    <property name="dart.analysis.tool.window.visible" value="false" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/pom.xml" />
    <property name="project.structure.last.edited" value="Project" />
    <property name="project.structure.proportion" value="0.0" />
    <property name="project.structure.side.proportion" value="0.0" />
    <property name="settings.editor.selected.configurable" value="preferences.pluginManager" />
    <property name="show.migrate.to.gradle.popup" value="false" />
  </component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/src/example" />
    </key>
  </component>
  <component name="ReplState" timestamp="1522782604381">{:repl-history {:ide [], :local [{:command &quot;(map (fn [a b]\n       [a b]) [a b c][1 2 3])&quot;, :offset 44, :ns &quot;user&quot;} {:command &quot;(map (fn [a b]\n       [a b]) '(a b c)\n  [1 2 3])&quot;, :offset 48, :ns &quot;user&quot;} {:command &quot;(map (fn [a b]\n       [a b]) '(a b c)\n  (range))&quot;, :offset 48, :ns &quot;user&quot;} {:command &quot;(map (fn [a b c]\n       [a b c]) '(a b c)\n  (range))&quot;, :offset 52, :ns &quot;user&quot;} {:command &quot;(map (fn [a b c]\n       [a b c]) '(a b c)\n  (range)(repeat 42))&quot;, :offset 63, :ns &quot;user&quot;} {:command &quot;(defn pipe-segs [pipe]\n  (&lt;mget pipe :kids))&quot;, :offset 44, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn pipe-seg-execute [stp]\n  ;; todo find and cache to-rq, to-indata, to-ak\n  (pln :go-seg!! @stp)\n  (a/go\n    (loop []\n      (when (a/&lt;! (:in-rq @stp))\n        (pln :got-in-rq! (:id @stp))\n        (pln :reading (:in-data @stp))\n        ;; unlike h/w, rq goes out before data (or we would block on data and never see rq)\n        (let [d (a/&lt;! (:in-data @stp))]\n          (when (nil? d)\n            (pln :indata-closed-after-inrq!))\n\n          (when d\n            (pln :inakking)\n            (a/&gt;! (:in-ak stp) true) ;; make async put, or can we rely on them being waiting?\n            (pln :computing)\n            (let [d-out ((:process stp) d)]\n              (pln :computed-dout d-out)\n              (swap! stp :out-data d-out)\n              (recur)))))))\n\n  (pln :closing-seg!!! (:id @stp))\n  (a/close! (:in-data @stp))\n  (a/close! (:in-ak @stp))\n  ;; close out-rq to receiver if any\n  )&quot;, :offset 891, :ns &quot;example.micropipeline&quot;} {:command &quot;(:in-data @(first (:segs @pipe)))&quot;, :offset 33, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-rq @(first (:segs @pipe))))\n\n      (a/put! (:in-rq @(first (:segs @pipe))) true)\n      (pln :inrq-put!)\n      (pln :indta-chan!!!! (:in-data @(first (:segs @pipe))))\n      (when (a/put! (:in-data @(first (:segs @pipe))) [0 1 2])\n          (pln :piped!)\n          (when (a/&lt;!! (:in-ack @(last (:segs @pipe)))))\n          (let [out (a/&lt;!! (:out-data @(last (:segs @pipe))))]\n            (assert (not (nil? out)))\n            (assert (= out [1 3 5]))))))&quot;, :offset 866, :ns &quot;example.micropipeline&quot;} {:command &quot;42&quot;, :offset 2, :ns &quot;user&quot;} {:command &quot;(defn data-ack\n  (cells-init)\n  (let [pipe (make-pipeline\n               (fn [data]\n                 (map #(* % 2) data))\n               (fn [data]\n                 (map #(+ % 100) data)))]\n    (if (async/&gt;!! (:in-data (first (:steps pipe))) [0 1 2])\n      (do\n        (pln :piped!)\n        (let [out (async/&lt;!! (:out-data (last (:steps pipe))))]\n          (is (not (nil? out)))\n          (is (= out [1 3 5])))))))&quot;, :offset 414, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn make-pipeline [&amp; processors]\n  (md/make ::pipeline\n    :segs (cF (for [id (range (count processors))]\n                (make-pipe-seg me id (nth processors id))))))&quot;, :offset 169, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n  (cells-init)\n  (let [pipe (make-pipeline\n               (fn [data]\n                 (map #(* % 2) data))\n               (fn [data]\n                 (map #(+ % 100) data)))]\n    \n    (doseq [seg (:segs @pipe)]\n      (pipe-seg-execute seg))\n\n    (pln :go!!!! (:in-data (first (:steps pipe))))\n    (if (a/&gt;!! (:in-data (first (:steps pipe))) [0 1 2])\n      (do\n        (pln :piped!)\n        (let [out (a/&lt;!! (:out-data (last (:steps pipe))))]\n          (assert (not (nil? out)))\n          (assert (= out [1 3 5])))))))&quot;, :offset 535, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n  (cells-init)\n  (let [pipe (make-pipeline\n               (fn [data]\n                 (map #(* % 2) data))\n               (fn [data]\n                 (map #(+ % 100) data)))]\n    \n    (doseq [seg (:segs @pipe)]\n      (pipe-seg-execute seg))\n\n    (pln :go!!!! (:in-data @(first (:steps pipe))))\n    (if (a/&gt;!! (:in-data @(first (:steps pipe))) [0 1 2])\n      (do\n        (pln :piped!)\n        (let [out (a/&lt;!! (:out-data (last (:steps pipe))))]\n          (assert (not (nil? out)))\n          (assert (= out [1 3 5])))))))&quot;, :offset 537, :ns &quot;example.micropipeline&quot;} {:command &quot;(do\n  (defn data-ack []\n    (cells-init)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-data @(first (:steps pipe))))\n      (if (a/&gt;!! (:in-data @(first (:steps pipe))) [0 1 2])\n        (do\n          (pln :piped!)\n          (let [out (a/&lt;!! (:out-data (last (:steps pipe))))]\n            (assert (not (nil? out)))\n            (assert (= out [1 3 5])))))))\n\n  (data-ack))&quot;, :offset 629, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-data @(first (:steps pipe))))\n      (if (a/&gt;!! (:in-data @(first (:steps pipe))) [0 1 2])\n        (do\n          (pln :piped!)\n          (let [out (a/&lt;!! (:out-data (last (:steps pipe))))]\n            (assert (not (nil? out)))\n            (assert (= out [1 3 5])))))))&quot;, :offset 608, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-data @(first (:steps pipe))))\n      (if (a/&gt;!! (:in-data @(first (:steps pipe))) [0 1 2])\n        (do\n          (pln :piped!)\n          (let [out (a/&lt;!! (:out-data (last (:steps pipe))))]\n            (assert (not (nil? out)))\n            (assert (= out [1 3 5])))))))&quot;, :offset 624, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! pipe)\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-data @(first (:steps pipe))))\n      (if (a/&gt;!! (:in-data @(first (:steps pipe))) [0 1 2])\n        (do\n          (pln :piped!)\n          (let [out (a/&lt;!! (:out-data (last (:steps pipe))))]\n            (assert (not (nil? out)))\n            (assert (= out [1 3 5])))))))&quot;, :offset 649, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-data @(first (:steps pipe))))\n      (if (a/&gt;!! (:in-data @(first (:steps pipe))) [0 1 2])\n        (do\n          (pln :piped!)\n          (let [out (a/&lt;!! (:out-data (last (:steps pipe))))]\n            (assert (not (nil? out)))\n            (assert (= out [1 3 5])))))))&quot;, :offset 682, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn pipe-seg-execute [stp]\n  ;; todo find and cache to-rq, to-indata, to-ak\n  (pln :go-seg!! @stp)\n  (a/go\n    (loop []\n      (when (a/&lt;! (:in-rq @stp))\n        ;; unlike h/w, rq goes out before data (or we would block on data and never see rq)\n        (let [d (a/&lt;! (:in-data @stp))]\n          (when (nil? d)\n            (pln :indata-closed-after-inrq!))\n\n          (when d\n            (pln :inakking)\n            (a/&gt;! (:in-ak stp) true) ;; make async put, or can we rely on them being waiting?\n            (pln :computing)\n            (let [d-out ((:process stp) d)]\n              (pln :computed-dout d-out)\n              (swap! stp :out-data d-out)\n              (recur)))))))\n\n  (a/close! (:in-data @stp))\n  (a/close! (:in-ak @stp))\n  ;; close out-rq to receiver if any\n  )&quot;, :offset 780, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n      (pln :go!!!! (first (:segs @pipe)))\n      (pln :go!!!! (:in-data @(first (:segs @pipe))))\n\n\n\n      (pln :go!!!! (:in-data @(first (:segs @pipe))))\n      (if (a/&gt;!! (:in-data @(first (:segs @pipe))) [0 1 2])\n        (do\n          (pln :piped!)\n          (let [out (a/&lt;!! (:out-data (last (:segs @pipe))))]\n            (assert (not (nil? out)))\n            (assert (= out [1 3 5])))))))&quot;, :offset 780, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n      (pln :go!!!! (first (:segs @pipe)))\n      (pln :go!!!! (:in-data @(first (:segs @pipe))))\n\n\n\n      (pln :go!!!! (:in-data @(first (:segs @pipe))))\n      (a/&gt;!! (:in-ack @(first (:segs @pipe))) true)\n      (if (a/&gt;!! (:in-data @(first (:segs @pipe))) [0 1 2])\n        (do\n          (pln :piped!)\n          (let [out (a/&lt;!! (:out-data (last (:segs @pipe))))]\n            (assert (not (nil? out)))\n            (assert (= out [1 3 5])))))))&quot;, :offset 832, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n      (pln :go!!!! (first (:segs @pipe)))\n      (pln :go!!!! (:in-data @(first (:segs @pipe))))\n\n\n\n      (pln :go!!!! (:in-data @(first (:segs @pipe))))\n      (a/&gt;!! (:in-rq @(first (:segs @pipe))) true)\n      (if (a/&gt;!! (:in-data @(first (:segs @pipe))) [0 1 2])\n        (do\n          (pln :piped!)\n          (let [out (a/&lt;!! (:out-data (last (:segs @pipe))))]\n            (assert (not (nil? out)))\n            (assert (= out [1 3 5])))))))&quot;, :offset 831, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n      (pln :go!!!! (first (:segs @pipe)))\n      (pln :go!!!! (:in-data @(first (:segs @pipe))))\n\n\n\n      (pln :go!!!! (:in-data @(first (:segs @pipe))))\n      (a/put! (:in-rq @(first (:segs @pipe))) true)\n      (pln :inrq-put!)\n      (if (a/&gt;!! (:in-data @(first (:segs @pipe))) [0 1 2])\n        (do\n          (pln :piped!)\n          (let [out (a/&lt;!! (:out-data (last (:segs @pipe))))]\n            (assert (not (nil? out)))\n            (assert (= out [1 3 5])))))))&quot;, :offset 855, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n      (pln :go!!!! (first (:segs @pipe)))\n      (pln :go!!!! (:in-data @(first (:segs @pipe))))\n\n\n\n      (pln :go!!!! (:in-data @(first (:segs @pipe))))\n      (a/put! (:in-rq @(first (:segs @pipe))) true)\n      (pln :inrq-put!)\n      (when (a/&gt;!! (:in-data @(first (:segs @pipe))) [0 1 2])\n          (pln :piped!)\n          (when (a/&lt;!! (:in-ack @(last (:segs @pipe)))))\n          (let [out (a/&lt;!! (:out-data @(last (:segs @pipe))))]\n            (assert (not (nil? out)))\n            (assert (= out [1 3 5]))))))&quot;, :offset 902, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn pipe-seg-execute [stp]\n  ;; todo find and cache to-rq, to-indata, to-ak\n  (pln :go-seg!! @stp)\n  (a/go\n    (loop []\n      (when (a/&lt;! (:in-rq @stp))\n        (pln :got-in-rq! (:id @stp))\n        (pln :reading (:in-data @stp))\n        ;; unlike h/w, rq goes out before data (or we would block on data and never see rq)\n        (let [d (a/&lt;! (:in-data @stp))]\n          (when (nil? d)\n            (pln :indata-closed-after-inrq!))\n\n          (when d\n            (pln :inakking d)\n            (pln :akking-to (:in-ak @stp))\n            (a/&gt;! (:in-ak @stp) true) ;; make async put, or can we rely on them being waiting?\n            (pln :computing (:processor @stp))\n            \n            (let [d-out ((:processor @stp) d)]\n              (pln :computed-dout d-out)\n              (a/&gt;! (:out-data @stp) d-out)\n              (pln :dout-sent d-out)\n              (recur))))))\n\n    (pln :closing-seg!!! (:id @stp))\n    (a/close! (:in-data @stp))\n    (a/close! (:in-ak @stp)))\n  ;; close out-rq to receiver if any\n  )&quot;, :offset 1016, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn pipe-seg-execute [stp]\n  ;; todo find and cache to-rq, to-indata, to-ak\n  (pln :go-seg!! @stp)\n  (a/go\n    (loop []\n      (when (a/&lt;! (:in-rq @stp))\n        (pln :got-in-rq! (:id @stp))\n        (pln :reading (:in-data @stp))\n        ;; unlike h/w, rq goes out before data (or we would block on data and never see rq)\n        (let [d (a/&lt;! (:in-data @stp))]\n          (when (nil? d)\n            (pln :indata-closed-after-inrq!))\n\n          (when d\n            (pln :inakking d)\n            (pln :akking-to (:in-ak @stp))\n            (a/&gt;! (:in-ak @stp) true) ;; make async put, or can we rely on them being waiting?\n            (pln :computing (:processor @stp))\n\n            (let [d-out ((:processor @stp) d)]\n              (pln :computed-dout d-out)\n              (pln :send-to (:out-data @stp))\n              (a/&gt;! (:out-data @stp) d-out)\n              (pln :dout-sent d-out)\n              (recur))))))\n\n    (pln :closing-seg!!! (:id @stp))\n    (a/close! (:in-data @stp))\n    (a/close! (:in-ak @stp)))\n  ;; close out-rq to receiver if any\n  )&quot;, :offset 1050, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-rq @(first (:segs @pipe))))\n\n      (a/put! (:in-rq @(first (:segs @pipe))) true)\n      (pln :inrq-put!)\n      (pln :indta-chan!!!! (:in-data @(first (:segs @pipe))))\n      (when (a/put! (:in-data @(first (:segs @pipe))) [0 1 2])\n          (pln :piped!)\n          (pln :reading-ack (:in-ak @(first (:segs @pipe))))\n\n          (let [ak (a/&lt;!! (:in-ak @(first (:segs @pipe))))]\n            (pln :got-ack!!! ak)\n            (pln :get-result (last (:segs @pipe))\n              (:out-data @(last (:segs @pipe))))\n            (a/take! (:out-data @(last (:segs @pipe))))\n\n            (let [tout (a/timeout 1000)\n                  bam (a/alt!\n                        tout :timeout\n                        (:out-data @(last (:segs @pipe))) :sent)]\n              (pln :bam-out bam)\n              ;(assert (not (nil? out)))\n              ;(assert (= out [1 3 5]))\n              (a/close! (:in-rq @(first (:segs @pipe))))\n              (pln :booya!!!!!!!!!! out))))))&quot;, :offset 1369, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-rq @(first (:segs @pipe))))\n\n      (a/put! (:in-rq @(first (:segs @pipe))) true)\n      (pln :inrq-put!)\n      (pln :indta-chan!!!! (:in-data @(first (:segs @pipe))))\n      (when (a/put! (:in-data @(first (:segs @pipe))) [0 1 2])\n          (pln :piped!)\n          (pln :reading-ack (:in-ak @(first (:segs @pipe))))\n\n          (let [ak (a/&lt;!! (:in-ak @(first (:segs @pipe))))]\n            (pln :got-ack!!! ak)\n            (pln :get-result (last (:segs @pipe))\n              (:out-data @(last (:segs @pipe))))\n            (a/take! (:out-data @(last (:segs @pipe))))\n\n            (let [tout (a/timeout 1000)\n                  bam (a/alt!\n                        tout :timeout\n                        (:out-data @(last (:segs @pipe))) :sent)]\n              (pln :bam-out bam)\n              ;(assert (not (nil? out)))\n              ;(assert (= out [1 3 5]))\n              (a/close! (:in-rq @(first (:segs @pipe))))\n              (pln :booya!!!!!!!!!! bam))))))&quot;, :offset 1369, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-rq @(first (:segs @pipe))))\n\n      (a/put! (:in-rq @(first (:segs @pipe))) true)\n      (pln :inrq-put!)\n      (pln :indta-chan!!!! (:in-data @(first (:segs @pipe))))\n      (when (a/put! (:in-data @(first (:segs @pipe))) [0 1 2])\n          (pln :piped!)\n          (pln :reading-ack (:in-ak @(first (:segs @pipe))))\n\n          (let [ak (a/&lt;!! (:in-ak @(first (:segs @pipe))))]\n            (pln :got-ack!!! ak)\n            (pln :get-result (last (:segs @pipe))\n              (:out-data @(last (:segs @pipe))))\n            \n\n            (let [tout (a/timeout 1000)\n                  bam (a/alt!\n                        tout :timeout\n                        (:out-data @(last (:segs @pipe))) :sent)]\n              (pln :bam-out bam)\n              ;(assert (not (nil? out)))\n              ;(assert (= out [1 3 5]))\n              (a/close! (:in-rq @(first (:segs @pipe))))\n              (pln :booya!!!!!!!!!! bam))))))&quot;, :offset 1326, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-rq @(first (:segs @pipe))))\n\n      (a/put! (:in-rq @(first (:segs @pipe))) true)\n      (pln :inrq-put!)\n      (pln :indta-chan!!!! (:in-data @(first (:segs @pipe))))\n      (when (a/put! (:in-data @(first (:segs @pipe))) [0 1 2])\n          (pln :piped!)\n          (pln :reading-ack (:in-ak @(first (:segs @pipe))))\n\n          (let [ak (a/&lt;!! (:in-ak @(first (:segs @pipe))))]\n            (pln :got-ack!!! ak)\n            (pln :get-result (last (:segs @pipe))\n              (:out-data @(last (:segs @pipe))))\n            \n\n            (go\n              (let [tout (a/timeout 1000)\n                  bam (a/alt!\n                        tout :timeout\n                        (:out-data @(last (:segs @pipe))) :sent)]\n              (pln :bam-out bam)\n              ;(assert (not (nil? out)))\n              ;(assert (= out [1 3 5]))\n              (a/close! (:in-rq @(first (:segs @pipe))))\n              (pln :booya!!!!!!!!!! bam)))))))&quot;, :offset 1345, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 2 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-rq @(first (:segs @pipe))))\n\n      (a/put! (:in-rq @(first (:segs @pipe))) true)\n      (pln :inrq-put!)\n      (pln :indta-chan!!!! (:in-data @(first (:segs @pipe))))\n      (when (a/put! (:in-data @(first (:segs @pipe))) [0 1 2])\n          (pln :piped!)\n          (pln :reading-ack (:in-ak @(first (:segs @pipe))))\n\n          (let [ak (a/&lt;!! (:in-ak @(first (:segs @pipe))))]\n            (pln :got-ack!!! ak)\n            (pln :get-result (last (:segs @pipe))\n              (:out-data @(last (:segs @pipe))))\n\n\n            (a/go\n              (let [tout (a/timeout 1000)\n                  bam (a/alt!\n                        tout :timeout\n                        (:out-data @(last (:segs @pipe))) :sent)]\n              (pln :bam-out bam)\n              ;(assert (not (nil? out)))\n              ;(assert (= out [1 3 5]))\n              (a/close! (:in-rq @(first (:segs @pipe))))\n              (pln :booya!!!!!!!!!! bam)))))))&quot;, :offset 1335, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 #_\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 1 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-rq @(first (:segs @pipe))))\n\n      (a/put! (:in-rq @(first (:segs @pipe))) true)\n      (pln :inrq-put!)\n      (pln :indta-chan!!!! (:in-data @(first (:segs @pipe))))\n      (when (a/put! (:in-data @(first (:segs @pipe))) [0 1 2])\n          (pln :piped!)\n          (pln :reading-ack (:in-ak @(first (:segs @pipe))))\n\n          (let [ak (a/&lt;!! (:in-ak @(first (:segs @pipe))))]\n            (pln :got-ack!!! ak)\n            (pln :get-result (last (:segs @pipe))\n              (:out-data @(last (:segs @pipe))))\n\n\n            (a/go\n              (let [tout (a/timeout 1000)\n                  bam (a/alt!\n                        tout :timeout\n                        (:out-data @(last (:segs @pipe))) :sent)]\n              (pln :bam-out bam)\n              ;(assert (not (nil? out)))\n              ;(assert (= out [1 3 5]))\n              (a/close! (:in-rq @(first (:segs @pipe))))\n              (pln :booya!!!!!!!!!! bam)))))))&quot;, :offset 1355, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn data-ack []\n    (cells-init)\n  (pln :cinit!)\n    (let [pipe (make-pipeline\n                 (fn [data]\n                   (map #(* % 2) data))\n                 #_\n                 (fn [data]\n                   (map #(+ % 100) data)))]\n      (pln :pipe!! @pipe)\n      (pln :segs (:segs @pipe))\n\n      (assert (= 1 (count (:segs @pipe))))\n\n      (doseq [seg (:segs @pipe)]\n        (pipe-seg-execute seg))\n\n\n      (pln :go!!!! (:in-rq @(first (:segs @pipe))))\n\n      (a/put! (:in-rq @(first (:segs @pipe))) true)\n      (pln :inrq-put!)\n      (pln :indta-chan!!!! (:in-data @(first (:segs @pipe))))\n      (when (a/put! (:in-data @(first (:segs @pipe))) [0 1 2])\n          (pln :piped!)\n          (pln :reading-ack (:in-ak @(first (:segs @pipe))))\n\n          (let [ak (a/&lt;!! (:in-ak @(first (:segs @pipe))))]\n            (pln :got-ack!!! ak)\n            (pln :get-result (last (:segs @pipe))\n              (:out-data @(last (:segs @pipe))))\n\n\n            (a/go\n              (let [tout (a/timeout 1000)\n                  bam (a/alt!\n                        tout :timeout\n                        (:out-data @(last (:segs @pipe)))\n                        ([r] r))]\n              (pln :bam-out bam)\n              ;(assert (not (nil? out)))\n              ;(assert (= out [1 3 5]))\n              (a/close! (:in-rq @(first (:segs @pipe))))\n              (pln :booya!!!!!!!!!! bam)))))))&quot;, :offset 1381, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn make-pipeline [in-chan out-chan &amp; processors]\n  (md/make ::pipeline\n    :in-data in-chan\n    :out-data out-chan\n    :segs (cF (let [id (atom -1)\n                    next-seg (atom nil)]\n                (for [proc processors]\n                  (swap! next-seg\n                    (make-pipe-seg me\n                      (swap! id inc)\n                      (if (zero? id)\n                        in-chan (a/chan))\n                      (if (= id (dec (count processors)))\n                        out-chan (a/chan))\n                      proc @next-seg)))))))&quot;, :offset 563, :ns &quot;example.micropipeline&quot;} {:command &quot;(doseq [[a b] [1 2 3]]\n  (pln a b))&quot;, :offset 35, :ns &quot;example.micropipeline&quot;} {:command &quot;(let [d [1 2 3]]\n  (map vec d (rest d)))&quot;, :offset 40, :ns &quot;example.micropipeline&quot;} {:command &quot;(let [d [1 2 3]]\n  (map vector d (rest d)))&quot;, :offset 43, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn make-pipeline [in-chan out-chan &amp; processors]\n  (md/make ::pipeline\n    :in-data in-chan\n    :out-data out-chan\n    :segs (cF (let [id (atom -1)]\n                (into (i/int-map)\n                  (for [proc processors\n                        :let [id (swap! id inc)]]\n                    [id (make-pipe-seg me (swap! id inc) proc)]))))))&quot;, :offset 345, :ns &quot;example.micropipeline&quot;} {:command &quot;(into (i/int-map) [[1 'a][2 'b]])&quot;, :offset 33, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn make-pipeline [in-chan out-chan processors]\n  (md/make ::pipeline\n    :in-data in-chan\n    :out-data out-chan\n    :segs (cF (let [id (atom -1)]\n                (into (i/int-map)\n                  (dorun\n                    (for [proc processors\n                        :let [id (swap! id inc)]]\n                    [id (make-pipe-seg me id proc)])))))))&quot;, :offset 359, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn make-pipe-seg [pipe id processor]\n  (pln :make-seg id)\n  (md/make ::pipeseg\n    :pipe pipe\n    :id id\n    :processor processor\n    :in-rq (a/chan)\n    :in-data (a/chan)\n    :in-ak (a/chan)))&quot;, :offset 196, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn make-pipeline [in-chan out-chan processors]\n  (md/make ::pipeline\n    :in-data in-chan\n    :out-data out-chan\n    :segs (cF (let [ida (atom -1)]\n                (into (i/int-map)\n                  (dorun\n                    (for [proc processors\n                        :let [id (swap! ida inc)]]\n                    [id (make-pipe-seg me id proc)])))))))&quot;, :offset 361, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn make-pipeline [in-chan out-chan processors]\n  (pln :porcs (count processors))\n  (md/make ::pipeline\n    :in-data in-chan\n    :out-data out-chan\n    :segs (cF (let [ida (atom -1)\n                    segs (dorun\n                           (for [proc processors\n                                 :let [id (swap! ida inc)]]\n                             [id (make-pipe-seg me id proc)]))]\n                (println :isegs segs)\n                (into (i/int-map) segs)))))&quot;, :offset 470, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn make-pipeline [in-chan out-chan processors]\n  (pln :porcs (count processors))\n  (md/make ::pipeline\n    :in-data in-chan\n    :out-data out-chan\n    :segs (cF (let [ida (atom -1)\n                    segs (do\n                           (for [proc processors\n                                 :let [id (swap! ida inc)]]\n                             [id (make-pipe-seg me id proc)]))]\n                (println :isegs segs)\n                (into (i/int-map) segs)))))&quot;, :offset 467, :ns &quot;example.micropipeline&quot;} {:command &quot;(for [i [1 2]]\n  [i (+ 10 i)])&quot;, :offset 30, :ns &quot;example.micropipeline&quot;} {:command &quot;(do (for [i [1 2]]\n      [i (+ 10 i)]))&quot;, :offset 39, :ns &quot;example.micropipeline&quot;} {:command &quot;(into (i/int-map)\n  (for [i [1 2]]\n      [i (+ 10 i)]))&quot;, :offset 55, :ns &quot;example.micropipeline&quot;} {:command &quot;(into (i/int-map)\n  (for [i [1 2]\n        :let [t2 (* 2 i)]]\n      [i t2]))&quot;, :offset 75, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn make-pipe-seg [pipe id processor]\n  ;;(pln :make-seg id pipe)\n  (md/make ::pipeseg\n    :pipe pipe\n    :id id\n    :processor processor\n    :in-rq (a/chan)\n    :in-data (a/chan)\n    :in-ak (a/chan)))&quot;, :offset 203, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn make-pipeline [in-chan out-chan processors]\n  (pln :porcs (count processors))\n  (md/make ::pipeline\n    :in-data in-chan\n    :out-data out-chan\n    :segs (let [ida (atom -1)\n                    segs (do\n                           (for [proc processors\n                                 :let [id (swap! ida inc)]]\n                             [id (make-pipe-seg me id proc)]))]\n                (println :isegs segs)\n                (let [im (into (i/int-map) segs)]\n                  (pln :im im)\n                  im))))&quot;, :offset 525, :ns &quot;example.micropipeline&quot;} {:command &quot;(let [ns (for [i [1 2]\n               :let [t2 (* 2 i)]]\n           [i t2])]\n  (into (i/int-map) ns))&quot;, :offset 101, :ns &quot;example.micropipeline&quot;} {:command &quot;(let [ns (for [i [1 2]\n               :let [t2 (* 2 i)]]\n           [i t2])]\n  (into {} ns))&quot;, :offset 92, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn make-pipeline [in-chan out-chan processors]\n  (pln :porcs (count processors))\n  (md/make ::pipeline\n    :in-data in-chan\n    :out-data out-chan\n    :segs (cF (let [ida (atom -1)\n                    segs (do\n                           (for [proc processors\n                                 :let [id (swap! ida inc)]]\n                             [id (make-pipe-seg me id proc)]))]\n                (println :isegs segs)\n                (let [im (into {} segs)]\n                  (pln :im im)\n                  im)))))&quot;, :offset 521, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn make [&amp; arg-list]\n  (cond\n    (odd? (count arg-list)) (apply make :type arg-list)\n    :else\n    (#?(:clj dosync :cljs do)\n     ;;(println :md-making (nth arg-list 1))\n      \n     (let [iargs (apply hash-map arg-list)\n           me (#?(:clj ref :cljs atom)\n               (merge {:par *par*}\n                      (-&gt;&gt; arg-list\n                           (partition 2)\n                           (filter (fn [[slot v]]\n                                     (not (= :type slot))))\n                           (map (fn [[k v]]\n                                  (vector k (if (c-ref? v)\n                                              unbound\n                                              v))))\n                           (into {})))\n               :meta (merge\n                       {:state :nascent}\n                       (select-keys iargs [:type])))]\n       (assert (meta me))\n        #_(when-not (:par @me)\n          (println :no-par!!!! me))\n       (rmap-meta-setf\n        [:cz me]\n        (-&gt;&gt; arg-list\n             (partition 2)\n             (filter (fn [[slot v]]\n                       (md-install-cell me slot v)))\n             (map vec)\n             (into {})))\n\n       (with-integrity (:awaken me)\n        (md-awaken me)\n        (println :md-awaken-complete))\n       me))))&quot;, :offset 1286, :ns &quot;tiltontec.model.core&quot;} {:command &quot;(defn md-awaken\n  \&quot;(1) do initial evaluation of all ruled slots\n   (2) call observers of all slots\&quot;\n  [me]\n  (assert me \&quot;md-awaken passed nil\&quot;)\n  (println :md-awaken!!!!!!!!)\n  (md-awaken-before me)\n  (c-assert (= :nascent (md-state me)))\n  (rmap-meta-setf [:state me] :awakening)\n  (doall\n   (for [slot (keys @me)]\n     ;; next is tricky: if slot is in :cz but nil, it has been \n     ;; optimized-away and observed then in the rare case\n     ;; it gets optimized away on other than the initial\n     ;; value.\n     (when-let [c (slot (md-cz me) :not-found)]\n       (cond\n         (= c :not-found)\n         ;; these need at least an initial observe\n         (do (when (and (= slot :kids)(slot @me))\n               (pme :md-awaken-kids-nocz-nonnil-obs slot\n                 (keys (md-cz me))\n                 (:kids (md-cz me) :hunh))\n               )\n             (observe slot me (slot @me) unbound nil))\n         :else (do\n                 (pme :md-awaken-awks-cell slot)\n                 (c-awaken c)\n                 (pme :md-awakened-awks-cell slot)) ))))\n  (rmap-meta-setf [:state me] :awake)\n  me)&quot;, :offset 1103, :ns &quot;tiltontec.model.base&quot;} {:command &quot;(defn calculate-and-set\n  \&quot;Calculate, link, record, and propagate.\&quot;\n  [c dbgid dbgdata]\n  (do                                                       ;; (wtrx [0 20 :cnset-entry (c-slot c)]\n    (let [[raw-value propagation-code] (calculate-and-link c)]\n      ;;(trx :cn-set-sees!!!! (c-slot c) raw-value propagation-code)\n      (when-not (c-optimized-away? c)\n        (assert (map? @c) \&quot;calc-n-set\&quot;)\n\n        ;; this check for optimized-away? arose because a rule using without-c-dependency\n        ;; can be re-entered unnoticed since that clears *call-stack*. If re-entered, a subsequent\n        ;; re-exit will be of an optimized away cell, which will have been assumed\n        ;; as part of the opti-away processing.\n        (trx :calc-n-set-&gt;assume raw-value)\n        (c-value-assume c raw-value propagation-code)))))&quot;, :offset 820, :ns &quot;tiltontec.cell.evaluate&quot;} {:command &quot;(get (into (i/int-map) [[1 'a][2 'b]]) 2)&quot;, :offset 41, :ns &quot;example.micropipeline&quot;} {:command &quot;(data-ack)&quot;, :offset 10, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn c-optimized-away? [c]\n  (trx :opti? (:state @c))\n  (trx :opti? (c-ref? c))\n  (trx :opti? (map? @c))\n  (trx :opt (= :optimized-away (:state @c)))\n  (cond\n    (c-ref? c) (or (not (map? @c))\n                   (= :optimized-away (:state @c)))\n    :else true))&quot;, :offset 262, :ns &quot;tiltontec.cell.base&quot;} {:command &quot;(defn c-optimized-away? [c]\n  (trx :opti? (:state @c))\n  (trx :opti? (c-ref? c))\n  (trx :opti? (map? @c))\n  (trx :opt (= :optimized-away (:state @c)))\n  (trx :optval (:value @c))\n  (cond\n    (c-ref? c) (or (not (map? @c))\n                   (= :optimized-away (:state @c)))\n    :else true))&quot;, :offset 290, :ns &quot;tiltontec.cell.base&quot;} {:command &quot;(defn make-pipeline [in-chan out-chan processors]\n  (pln :porcs (count processors))\n  (md/make ::md/family\n    :in-data in-chan\n    :out-data out-chan\n    :kids (cF (the-kids\n                (let [ida (atom -1)]\n                (for [proc processors\n                      :let [id (swap! ida inc)]]\n                  (make-pipe-seg me id proc)))))\n\n    :seg-id-map (cF (let [raw (for [seg (&lt;mget me :kids)]\n                                [(pseg-id seg) seg])]\n                      (pln :rawsegs raw)\n                      (into {} raw)))))&quot;, :offset 541, :ns &quot;example.micropipeline&quot;} {:command &quot;(defn c-debug [c tag]\n  (when-not (integer? (c-pulse-observed c))\n    (trx :c-ref? (c-ref? c))\n    (trx :c-bebug-bad-pulse-obs tag (c-slot c) @c)\n    (trx :state (:state @c) :val (:value @c))\n    (trx :slot-pulse (:slot @c) (:pulse @c) (keys @c))\n    (assert false)))&quot;, :offset 267, :ns &quot;tiltontec.cell.base&quot;} {:command &quot;(defn c-optimized-away? [c]\n  (trx :opti-state? (::state @c)(contains? @c ::state))\n  (trx :opti-ref? (c-ref? c))\n  (trx :opti-meta (meta c))\n\n  (cond\n    (c-ref? c) (or (not (map? @c))\n                 (not (contains? @c ::state))\n                   (= :optimized-away (::state @c)))\n    :else true))&quot;, :offset 301, :ns &quot;tiltontec.cell.base&quot;} {:command &quot;(defn c-optimized-away? [c]\n  (trx :opti-state? (::state @c))\n  (trx :opti-ref? (c-ref? c))\n  (trx :opti-meta (meta c))\n\n  (cond\n    (c-ref? c) (or (not (map? @c))\n                 (not (contains? @c ::state))\n                   (= :optimized-away (::state @c)))\n    :else true))&quot;, :offset 279, :ns &quot;tiltontec.cell.base&quot;} {:command &quot;(deftest data-ack-test\n  (cells-init)\n  (pln :cinit!)\n  (let [procs [(fn [data]\n                 (map #(* % 2) data))\n\n               (fn [data]\n                 (map #(+ % 100) data))\n\n               (fn [data]\n                 (map #(- %) data))]\n        pipe-in (a/chan)\n        pipe-out (a/chan)\n        pipe (make-pipeline\n               pipe-in pipe-out\n               procs)]\n\n    (pln :gotpipe!!! pipe)\n    (is (= (count procs)\n          (count (pipe-segs pipe))))\n\n    (pln :strt-pipe pipe)\n\n    (pipe-start pipe)\n\n    (a/go\n      (a/put! pipe-in [0 1 2])\n      (a/put! pipe-in [1000 2000 3000]))\n\n    (a/go\n      (loop []\n        (let [tout (a/timeout 1000)\n              result (a/alt!\n                       tout :timeout\n                       pipe-out\n                       ([r] r))]\n          (pln :bam-out result)\n          ;(assert (not (nil? out)))\n          (when (not= result :timeout)\n            (is (or (= [[100 102 104]\n                        [2100 4100 6100]])))\n            (recur))))\n      #_ (do\n           (a/close! pipe-in)\n           (a/close! pipe-out)))))&quot;, :offset 1090, :ns &quot;example.micropipeline-test&quot;} {:command &quot;(defn pipe-start [pipe]\n  (let [segs (pipe-segs pipe)]\n    (doseq [seg segs]\n      (pipe-seg-start seg))\n\n    (let [ps0 (first (pipe-segs pipe))\n          psn (last (pipe-segs pipe))]\n      (go\n        (loop [fst :init\n               data nil]\n\n          (case fst\n            :exit\n            (pln :pipe-exiting)\n\n            :init\n            (let [d (&lt;! (:in-data @pipe))]\n              (pln :pipt-got! d)\n              (if d \n                (recur :toggle-rq-first d)\n                (recur :exit nil)))\n\n            :toggle-rq-first\n            (do\n              (put! (pseg-in-rq ps0) true)\n              (put! (pseg-in-data ps0) data)\n              (recur :get-rq-ak data))\n\n            :get-rq-ak\n            (do\n              (pln ;waiting-ak data)\n              (if (&lt;! (pseg-in-ak ps0))\n                (recur :init nil)\n                (recur :exit nil))))))))))&quot;, :offset 876, :ns &quot;example.pipeline&quot;} {:command &quot;(defn pipe-start [pipe]\n  (let [segs (pipe-segs pipe)]\n    (doseq [seg segs]\n      (pipe-seg-start seg))\n\n    (let [ps0 (first (pipe-segs pipe))\n          psn (last (pipe-segs pipe))]\n      (go\n        (loop [fst :init\n               data nil]\n\n          (case fst\n            :exit\n            (pln :pipe-exiting)\n\n            :init\n            (let [d (&lt;! (:in-data @pipe))]\n              (pln :pipt-got! d)\n              (if d\n                (recur :toggle-rq-first d)\n                (recur :exit nil)))\n\n            :toggle-rq-first\n            (do\n              (put! (pseg-in-rq ps0) true)\n              (put! (pseg-in-data ps0) data)\n              (recur :get-rq-ak data))\n\n            :get-rq-ak\n            (do\n              (pln :waiting-ak data)\n              (if (&lt;! (pseg-in-ak ps0))\n                (recur :init nil)\n                (recur :exit nil)))))))))&quot;, :offset 874, :ns &quot;example.pipeline&quot;} {:command &quot;(defn pipe-start [pipe]\n  (let [segs (pipe-segs pipe)]\n    (doseq [seg segs]\n      (pipe-seg-start seg))\n\n    (let [ps0 (first (pipe-segs pipe))\n          psn (last (pipe-segs pipe))]\n      (go\n        (loop [fst :init\n               data nil]\n\n          (case fst\n            :exit\n            (pln :pipe-exiting)\n\n            :init\n            (let [d (&lt;! (:in-data @pipe))]\n              (pln :pipt-got! d)\n              (recur (if d :toggle-rq-first :exit) d))\n\n            :toggle-rq-first\n            (do\n              (put! (pseg-in-rq ps0) true)\n              (put! (pseg-in-data ps0) data)\n              (recur :get-rq-ak data))\n\n            :get-rq-ak\n            (do\n              (pln :waiting-ak data)\n              (if (&lt;! (pseg-in-ak ps0))\n                (recur :init nil)\n                (recur :exit nil)))))))))&quot;, :offset 830, :ns &quot;example.pipeline&quot;} {:command &quot;(defn pipe-seg-start [seg]\n  (go\n    (loop []\n      (when (&lt;! (pseg-in-rq seg))\n        (pln :got-in-rq! (pseg-id seg))\n\n        ;; unlike h/w, rq goes out before data (or we would block on data and never see rq)\n        (when-let [d (&lt;! (pseg-in-data seg))]\n          (pln :got-data!! (pseg-id seg) d :aking!!!)\n          (&gt;! (pseg-in-ak seg) true) ;; make async put, or can we rely on them being waiting?\n\n\n\n          (let [d-out ((pseg-processor seg) d)]\n            (pln :computed-dout d-out)\n\n            (if-let [nxt (pseg-next-seg seg)]\n              (do ;; coordination required....\n                (put! (pseg-in-rq nxt) true)\n                (when (put! (pseg-in-data nxt) d-out)\n                  (let [ak (go (&lt;! (pseg-in-ak nxt)))]\n                    #_ (pln :got-relay-ak!!!! ak d-out))))\n              ;; ...just do it, the pipe is waiting\n              (do\n                (pln :piping-out!!!! d-out)\n                (&gt;! (pseg-pipe-out-data seg) d-out)))\n\n            (recur)))))\n\n    (pln :closing-seg!!! (:id @seg))\n    (close! (pseg-in-data seg))\n    (close! (pseg-in-ak seg))))&quot;, :offset 1098, :ns &quot;example.pipeline&quot;} {:command &quot;(deftest data-ack-test\n  (cells-init)\n  (reset! gclock 0)\n\n  (let [procs [(fn [data]\n                 (map #(* % 2) data))\n\n               (fn [data]\n                 (map #(+ % 100) data))\n\n               (fn [data]\n                 (map #(- %) data))]\n\n        pipe-in (chan)\n        pipe-out (chan)\n        pipe (make-pipeline\n               pipe-in pipe-out\n               procs)]\n\n    (pln :gotpipe!!! pipe)\n\n    (is (= (count procs)\n          (count (pipe-segs pipe))))\n\n    (pln :strt-pipe pipe)\n\n    (pipe-start pipe)\n\n    (let [data [[0 1 2]\n                ;[1000 2000 3000]\n                ;[-1 -10 -100]\n                ;[10 -20 30]\n                ]\n          top-chan (chan)\n          piping (atom @gclock)]\n      (go\n        (doseq [datum data]\n          (loop []\n            (when-let [beat (&lt;! top-chan)]\n              (when (&lt;  beat @glock)\n              (do\n                (pln :missed-beat!!! )\n                (recur)))))\n            \n          (when-let [tm (&lt;! top-chan)]\n            (assert (- tm (swap! myclock inc)))\n            (pln :putting-top tm datum)\n            (put! pipe-in datum)))))\n\n      (go\n        (loop []\n          (let [tout (timeout 1000)\n                result (alt!\n                         tout :timeout\n                         pipe-out\n                         ([r] r))]\n            (pln :bam-out result)\n            (when (not= result :timeout)\n              (recur)))))\n\n      (dotimes [n (count data)]\n        (let [base (inc @gclock)\n              step 3]\n          (swap! gclock + step)\n\n          (dotimes [n step]\n            (&gt;!! top-chan (+ base n)))))))&quot;, :offset 1614, :ns &quot;example.pipeline-test&quot;} {:command &quot;(deftest data-ack-test\n  (cells-init)\n  (reset! gclock 0)\n\n  (let [procs [(fn [data]\n                 (map #(* % 2) data))\n\n               (fn [data]\n                 (map #(+ % 100) data))\n\n               (fn [data]\n                 (map #(- %) data))]\n\n        pipe-in (chan)\n        pipe-out (chan)\n        pipe (make-pipeline\n               pipe-in pipe-out\n               procs)]\n\n    (pln :gotpipe!!! pipe)\n\n    (is (= (count procs)\n          (count (pipe-segs pipe))))\n\n    (pln :strt-pipe pipe)\n\n    (pipe-start pipe)\n\n    (let [data [[0 1 2]\n                ;[1000 2000 3000]\n                ;[-1 -10 -100]\n                ;[10 -20 30]\n                ]\n          top-chan (chan)\n          piping (atom @gclock)]\n      (go\n        (doseq [datum data]\n          (loop []\n            (when-let [beat (&lt;! top-chan)]\n              (when (&lt;  beat @gclock)\n              (do\n                (pln :missed-beat!!! )\n                (recur)))))\n            \n          (when-let [tm (&lt;! top-chan)]\n            (assert (- tm (swap! myclock inc)))\n            (pln :putting-top tm datum)\n            (put! pipe-in datum)))))\n\n      (go\n        (loop []\n          (let [tout (timeout 1000)\n                result (alt!\n                         tout :timeout\n                         pipe-out\n                         ([r] r))]\n            (pln :bam-out result)\n            (when (not= result :timeout)\n              (recur)))))\n\n      (dotimes [n (count data)]\n        (let [base (inc @gclock)\n              step 3]\n          (swap! gclock + step)\n\n          (dotimes [n step]\n            (&gt;!! top-chan (+ base n)))))))&quot;, :offset 1615, :ns &quot;example.pipeline-test&quot;} {:command &quot;(deftest data-ack-test\n  (cells-init)\n  (reset! gclock 0)\n\n  (let [procs [(fn [data]\n                 (map #(* % 2) data))\n\n               (fn [data]\n                 (map #(+ % 100) data))\n\n               (fn [data]\n                 (map #(- %) data))]\n\n        pipe-in (chan)\n        pipe-out (chan)\n        pipe (make-pipeline\n               pipe-in pipe-out\n               procs)]\n\n    (pln :gotpipe!!! pipe)\n\n    (is (= (count procs)\n          (count (pipe-segs pipe))))\n\n    (pln :strt-pipe pipe)\n\n    (pipe-start pipe)\n\n    (let [data [[0 1 2]\n                ;[1000 2000 3000]\n                ;[-1 -10 -100]\n                ;[10 -20 30]\n                ]\n          top-chan (chan)\n          piping (atom @gclock)]\n      (go\n        (doseq [datum data]\n          (loop []\n            (when-let [beat (&lt;! top-chan)]\n              (when (&lt;  beat @gclock)\n              (do\n                (pln :missed-beat!!! )\n                (recur)))))\n            \n          (pln :putting-top tm datum)\n          (put! pipe-in datum)))\n\n      (go\n        (loop []\n          (let [tout (timeout 1000)\n                result (alt!\n                         tout :timeout\n                         pipe-out\n                         ([r] r))]\n            (pln :bam-out result)\n            (when (not= result :timeout)\n              (recur)))))\n\n      (dotimes [n (count data)]\n        (let [base (inc @gclock)\n              step 3]\n          (swap! gclock + step)\n\n          (dotimes [n step]\n            (&gt;!! top-chan (+ base n))))))))&quot;, :offset 1523, :ns &quot;example.pipeline-test&quot;} {:command &quot;(deftest data-ack-test\n  (cells-init)\n  (reset! gclock 0)\n\n  (let [procs [(fn [data]\n                 (map #(* % 2) data))\n\n               (fn [data]\n                 (map #(+ % 100) data))\n\n               (fn [data]\n                 (map #(- %) data))]\n\n        pipe-in (chan)\n        pipe-out (chan)\n        pipe (make-pipeline\n               pipe-in pipe-out\n               procs)]\n\n    (pln :gotpipe!!! pipe)\n\n    (is (= (count procs)\n          (count (pipe-segs pipe))))\n\n    (pln :strt-pipe pipe)\n\n    (pipe-start pipe)\n\n    (let [data [[0 1 2]\n                ;[1000 2000 3000]\n                ;[-1 -10 -100]\n                ;[10 -20 30]\n                ]\n          top-chan (chan)\n          piping (atom @gclock)]\n      (go\n        (doseq [datum data]\n          (loop []\n            (when-let [beat (&lt;! top-chan)]\n              (if (&lt;  beat @gclock)\n              (do\n                (pln :missed-beat!!! )\n                (recur))\n              (do \n                (pln :putting-top tm datum) \n                (put! pipe-in datum)))))))\n\n      (go\n        (loop []\n          (let [tout (timeout 1000)\n                result (alt!\n                         tout :timeout\n                         pipe-out\n                         ([r] r))]\n            (pln :bam-out result)\n            (when (not= result :timeout)\n              (recur)))))\n\n      (dotimes [n (count data)]\n        (let [base (inc @gclock)\n              step 3]\n          (swap! gclock + step)\n\n          (dotimes [n step]\n            (&gt;!! top-chan (+ base n))))))))&quot;, :offset 1541, :ns &quot;example.pipeline-test&quot;} {:command &quot;(deftest data-ack-test\n  (cells-init)\n  (reset! gclock 0)\n\n  (let [procs [(fn [data]\n                 (map #(* % 2) data))\n\n               (fn [data]\n                 (map #(+ % 100) data))\n\n               (fn [data]\n                 (map #(- %) data))]\n\n        pipe-in (chan)\n        pipe-out (chan)\n        pipe (make-pipeline\n               pipe-in pipe-out\n               procs)]\n\n    (pln :gotpipe!!! pipe)\n\n    (is (= (count procs)\n          (count (pipe-segs pipe))))\n\n    (pln :strt-pipe pipe)\n\n    (pipe-start pipe)\n\n    (let [data [[0 1 2]\n                ;[1000 2000 3000]\n                ;[-1 -10 -100]\n                ;[10 -20 30]\n                ]\n          top-chan (chan)\n          piping (atom @gclock)]\n      (go\n        (doseq [datum data]\n          (loop []\n            (when-let [beat (&lt;! top-chan)]\n              (if (&lt;  beat @gclock)\n              (do\n                (pln :missed-beat!!! )\n                (recur))\n              (do \n                (pln :putting-top beat datum) \n                (put! pipe-in datum)))))))\n\n      (go\n        (loop []\n          (let [tout (timeout 1000)\n                result (alt!\n                         tout :timeout\n                         pipe-out\n                         ([r] r))]\n            (pln :bam-out result)\n            (when (not= result :timeout)\n              (recur)))))\n\n      (dotimes [n (count data)]\n        (let [base (inc @gclock)\n              step 3]\n          (swap! gclock + step)\n\n          (dotimes [n step]\n            (&gt;!! top-chan (+ base n))))))))&quot;, :offset 1543, :ns &quot;example.pipeline-test&quot;} {:command &quot;(defn make [&amp; arg-list]\n\n  (cond\n    (odd? (count arg-list)) (apply make :type arg-list)\n    :else\n    (#?(:clj dosync :cljs do)\n     ;;(println :md-making (nth arg-list 1))\n      \n     (let [iargs (apply hash-map arg-list)\n           me (#?(:clj ref :cljs atom)\n               (merge {:par *par*}\n                      (-&gt;&gt; arg-list\n                           (partition 2)\n                           (filter (fn [[slot v]]\n                                     (not (= :type slot))))\n                           (map (fn [[k v]]\n                                  (vector k (if (c-ref? v)\n                                              unbound\n                                              v))))\n                           (into {})))\n               :meta (merge\n                       {:state :nascent}\n                       (select-keys iargs [:type])))]\n       (assert (meta me))\n        #_(when-not (:par @me)\n          (println :no-par!!!! me))\n       (rmap-meta-setf\n        [:cz me]\n        (-&gt;&gt; arg-list\n             (partition 2)\n             (filter (fn [[slot v]]\n                       (md-install-cell me slot v)))\n             (map vec)\n             (into {})))\n\n       (with-integrity (:awaken me)\n        (md-awaken me)\n        #_ (println :md-awaken-complete))\n       me))))&quot;, :offset 1290, :ns &quot;tiltontec.model.core&quot;} {:command &quot;(defn pipe-seg-start [seg]\n  (go\n    (loop [fst :init\n           data-in nil\n           data-out nil]\n      \n      (case fst\n        :init (if (&lt;! (pseg-in-rq seg))\n                (do\n                  (pln :got-incoming-rq! (pseg-id seg))\n                  (recur :copy-data nil nil))\n                (pln :seg-out-on-rq))\n\n        :copy-data\n        (if-let [d (&lt;! (pseg-in-data seg))]\n                     (do\n                       (pln :got-data!! (pseg-id seg) d :aking!!!)\n                       (recur :ak-data d nil))\n                     (pln :seg-got-nil-data))\n        \n        :ak-data\n          (when (&gt;! (pseg-in-ak seg) true) \n            (recur :process-data data-in nil)) \n        \n        :process-data\n        (let [d-out ((pseg-processor seg) data-in)]\n          (pln :computed-dout d-out)\n\n          (if-let [nxt (pseg-next-seg seg)]\n            (recur :relay-next data-in d-out)\n            (recur :pipe-out data-in d-out)))\n        \n        :relay-next\n        (do ;; coordination required....\n          (put! (pseg-in-rq nxt) true)\n\n          (if (put! (pseg-in-data nxt) d-out)\n            (do\n              (pln :seg-put-processed-data-next d-out)\n              (recur :get-ak-from-next-seg))\n            (pln :nil-putting-data-next)))\n        \n        :pipe-out\n        ;; ...just do it, the pipe is waiting\n        (do\n          (pln :piping-out!!!! data-out)\n          (&gt;! (pseg-pipe-out-data seg) data-out))\n        \n        :get-ak-from-next-seg \n        (if (&lt;! (pseg-in-ak nxt))\n          (do\n            (pln :got-next-ak)\n            (recur :init nil nil))\n          (pln :nil-off-get-next-ak)))))\n\n    (pln :closing-seg!!! (:id @seg))\n    (close! (pseg-in-data seg))\n    (close! (pseg-in-ak seg)))&quot;, :offset 1735, :ns &quot;example.pipeline&quot;} {:command &quot;(defn pipe-seg-start [seg]\n  (go\n    (loop [fst :init\n           data nil]\n\n      (case fst\n        :init (if (&lt;! (pseg-in-rq seg))\n                (do\n                  (pln :got-incoming-rq! (pseg-id seg))\n                  (recur :copy-data nil))\n                (pln :seg-out-on-rq))\n\n        :copy-data\n        (if-let [d (&lt;! (pseg-in-data seg))]\n          (do\n            (pln :got-data!! (pseg-id seg) d :aking!!!)\n            (recur :ak-data d))\n          (pln :seg-got-nil-data))\n\n        :ak-data\n        (when (&gt;! (pseg-in-ak seg) true)\n          (recur :process-data data-in))\n\n        :process-data\n        (let [d-out ((pseg-processor seg) data-in)]\n          (pln :computed-dout d-out)\n\n          (if-let [nxt (pseg-next-seg seg)]\n            (recur :relay-next d-out)\n            (recur :pipe-out d-out)))\n\n        :relay-next\n        (do ;; coordination required....\n          (put! (pseg-in-rq nxt) true)\n\n          (if (put! (pseg-in-data nxt) d-out)\n            (do\n              (pln :seg-put-processed-data-next d-out)\n              (recur :get-ak-from-next-seg d-out))\n            (pln :nil-putting-data-next)))\n\n        :pipe-out\n        ;; ...just do it, the pipe is waiting\n        (do\n          (pln :piping-out!!!! data-out)\n          (&gt;! (pseg-pipe-out-data seg) data-out))\n\n        :get-ak-from-next-seg\n        (if (&lt;! (pseg-in-ak nxt))\n          (do\n            (pln :got-next-ak)\n            (recur :init nil nil))\n          (pln :nil-off-get-next-ak)))))\n\n  (pln :closing-seg!!! (:id @seg))\n  (close! (pseg-in-data seg))\n  (close! (pseg-in-ak seg)))&quot;, :offset 1583, :ns &quot;example.pipeline&quot;} {:command &quot;(defn pipe-seg-start [seg]\n  (go\n    (loop [fst :init\n           data nil]\n\n      (case fst\n        :init (if (&lt;! (pseg-in-rq seg))\n                (do\n                  (pln :got-incoming-rq! (pseg-id seg))\n                  (recur :copy-data nil))\n                (pln :seg-out-on-rq))\n\n        :copy-data\n        (if-let [d (&lt;! (pseg-in-data seg))]\n          (do\n            (pln :got-data!! (pseg-id seg) d :aking!!!)\n            (recur :ak-data d))\n          (pln :seg-got-nil-data))\n\n        :ak-data\n        (when (&gt;! (pseg-in-ak seg) true)\n          (recur :process-data data-in))\n\n        :process-data\n        (let [d-out ((pseg-processor seg) data-in)]\n          (pln :computed-dout d-out)\n\n          (if-let [nxt (pseg-next-seg seg)]\n            (recur :relay-next d-out)\n            (recur :pipe-out d-out)))\n\n        :relay-next\n        (do ;; coordination required....\n          (put! (pseg-in-rq nxt) true)\n\n          (if (put! (pseg-in-data nxt) d-out)\n            (do\n              (pln :seg-put-processed-data-next d-out)\n              (recur :get-ak-from-next-seg d-out))\n            (pln :nil-putting-data-next)))\n\n        :pipe-out\n        ;; ...just do it, the pipe is waiting\n        (do\n          (pln :piping-out!!!! data-out)\n          (&gt;! (pseg-pipe-out-data seg) data-out))\n\n        :get-ak-from-next-seg\n        (if (&lt;! (pseg-in-ak nxt))\n          (do\n            (pln :got-next-ak)\n            (recur :init nil))\n          (pln :nil-off-get-next-ak)))))\n\n  (pln :closing-seg!!! (:id @seg))\n  (close! (pseg-in-data seg))\n  (close! (pseg-in-ak seg)))&quot;, :offset 1579, :ns &quot;example.pipeline&quot;} {:command &quot;(defn pipe-seg-start [seg]\n  (go\n    (let [seg-next (pseg-next-seg seg)]\n      (loop [fst :init\n             data nil]\n\n        (case fst\n          :init (if (&lt;! (pseg-in-rq seg))\n                  (do\n                    (pln :got-incoming-rq! (pseg-id seg))\n                    (recur :copy-data nil))\n                  (pln :seg-out-on-rq))\n\n          :copy-data\n          (if-let [d (&lt;! (pseg-in-data seg))]\n            (do\n              (pln :seg-got-data!! (pseg-id seg) d :aking!!!)\n              (recur :ak-data d))\n            (pln :seg-got-nil-data))\n\n          :ak-data\n          (do\n            (&gt;! (pseg-in-ak seg) true)\n            (recur :process-data data))\n\n          :process-data\n          (let [d-out ((pseg-processor seg) data)]\n            (pln :computed-dout d-out)\n\n            (if seg-next\n              (recur :relay-next d-out)\n              (recur :pipe-out d-out)))\n\n          :relay-next\n          (do\n            (put! (pseg-in-rq seg-next) true)\n\n            (if (put! (pseg-in-data seg-next) data)\n              (do\n                (pln :seg-put-processed-data-next data)\n                (recur :get-ak-from-next-seg nil))\n              (pln :nil-putting-data-next)))\n\n          :pipe-out\n          ;; ...just do it, the pipe is waiting\n          (do\n            (pln :piping-out!!!! data)\n            (&gt;! (pseg-pipe-out-data seg) data))\n\n          :get-ak-from-next-seg\n          (if (&lt;! (pseg-in-ak seg-next))\n            (do\n              (pln :got-next-ak)\n              (recur :init nil))\n            (pln :nil-off-get-next-ak))))))\n\n  (pln :closing-seg!!! (:id @seg))\n  (close! (pseg-in-data seg))\n  (close! (pseg-in-ak seg)))&quot;, :offset 1665, :ns &quot;example.pipeline&quot;} {:command &quot;(defn pipe-seg-start [seg]\n  (go\n    (let [seg-next (pseg-next-seg seg)]\n      (loop [fst :init\n             data nil]\n\n        (case fst\n          :exit\n          (do\n            (pln :closing-seg!!! (:id @seg))\n            (close! (pseg-in-rq seg))\n            (close! (pseg-in-data seg))\n            (close! (pseg-in-ak seg)))\n\n          :init (if (&lt;! (pseg-in-rq seg))\n                  (do\n                    ;(pln :got-incoming-rq! (pseg-id seg))\n                    (recur :copy-data nil))\n                  (do\n                    (pln :seg-out-on-rq)\n                    (recur :exit nil)))\n\n          :copy-data\n          (if-let [d (&lt;! (pseg-in-data seg))]\n            (do\n              ;(pln :seg-got-data!! (pseg-id seg) d :aking!!!)\n              (recur :ak-data d))\n            (pln :seg-got-nil-data))\n\n          :ak-data\n          (do\n            (&gt;! (pseg-in-ak seg) true)\n            (recur :process-data data))\n\n          :process-data\n          (let [d-out ((pseg-processor seg) data)]\n            ;(pln :computed-dout d-out)\n\n            (if seg-next\n              (recur :relay-next d-out)\n              (recur :pipe-out d-out)))\n\n          :relay-next\n          (do\n            (put! (pseg-in-rq seg-next) true)\n\n            (if (put! (pseg-in-data seg-next) data)\n              (do\n                ;(pln :seg-put-processed-data-next data)\n                (recur :get-ak-from-next-seg nil))\n              (pln :nil-putting-data-next)))\n\n          :pipe-out\n          ;; ...just do it, the pipe is waiting\n          (do\n            ;(pln :piping-out!!!! data)\n            (&gt;! (pseg-pipe-out-data seg) data)\n            (recur :init nil))\n\n          :get-ak-from-next-seg\n          (if (&lt;! (pseg-in-ak seg-next))\n            (do\n              ;(pln :got-next-ak)\n              (recur :init nil))\n            (pln :nil-off-get-next-ak)))))))&quot;, :offset 1863, :ns &quot;example.pipeline&quot;} {:command &quot;(deftest pipe-clocked-inside\n  (cells-init)\n  (reset! gclock 0)\n\n  (let [procs [(fn [data]\n                 (map #(* % 2) data))\n\n               (fn [data]\n                 (map #(+ % 100) data))\n\n               (fn [data]\n                 (map #(- %) data))]\n\n        pipe-in (chan)\n        pipe-out (chan)\n        pipe (make-pipeline\n               pipe-in pipe-out\n               procs)]\n\n    (pipe-start pipe)\n\n    (let [data [[1]\n                [0 1 2]\n                [1000 2000 3000]\n                [-1 -10 -100]\n                [10 -20 30]]]\n      (go\n        (doseq [datum data]\n          (pln :drvr-putting-top  datum)\n          (put! pipe-in datum)))\n\n      (loop []\n        (let [tout (timeout 1000)\n              result (alt!!\n                       tout :timeout\n                       pipe-out\n                       ([r] r))]\n          (pln :drvr-bam-out result)\n          (when (not= result :timeout)\n            (recur))))\n\n      ;;;(&lt;!! (timeout 2000))\n\n      (pln :driver-exiting))))&quot;, :offset 1005, :ns &quot;example.pipeline-test&quot;} {:command &quot;(deftest pipe-clocked-inside\n  (cells-init)\n  (reset! gclock 0)\n\n  (let [procs [(fn [data]\n                 (map #(* % 2) data))\n\n               (fn [data]\n                 (map #(+ % 100) data))\n\n               (fn [data]\n                 (map #(- %) data))]\n\n        pipe-in (chan)\n        pipe-out (chan)\n        pipe (make-pipeline\n               pipe-in pipe-out\n               procs)]\n\n    (pipe-start pipe)\n\n    (let [data [[42]\n                [0 1 2]\n                [1000 2000 3000]\n                [-1 -10 -100]\n                [10 -20 30]]]\n      (go\n        (doseq [datum data]\n          (pln :drvr-putting-top  datum)\n          (put! pipe-in datum)))\n\n      (loop []\n        (let [tout (timeout 1000)\n              result (alt!!\n                       tout :timeout\n                       pipe-out\n                       ([r] r))]\n          (pln :drvr-bam-out result)\n          (when (not= result :timeout)\n            (recur))))\n\n      ;;;(&lt;!! (timeout 2000))\n\n      (pln :driver-exiting))))&quot;, :offset 1006, :ns &quot;example.pipeline-test&quot;} {:command &quot;(defn pipe-state [pipe fst]\n  (let [tick (&lt;mget me :clock)\n        ps0 (first (pipe-segs pipe))]\n    (pln :pst-tick! tick)\n    (cond\n      (zero? tick) :init\n\n      :default\n      (do\n        (pln :pst-fsm-case! fst)\n        (case fst\n          :init (when-let [d (&lt;!! (:in-chan @pipe))]\n                  (reset! pipe :in-data d)\n                  (reset! ps0 :in-rq tick)\n                  :get-ak)\n\n          :get-ak (when (= (:in-ak @ps0)\n                          (:in-rq @ps0))\n                    (pln :pipe-got-ps0-ack)\n                    :init))))))&quot;, :offset 559, :ns &quot;example.mxpipe&quot;} {:command &quot;(defn pipe-state [pipe fst]\n  (let [tick (&lt;mget pipe :clock)\n        ps0 (first (pipe-segs pipe))]\n    (pln :pst-tick! tick)\n    (cond\n      (zero? tick) :init\n\n      :default\n      (do\n        (pln :pst-fsm-case! fst)\n        (case fst\n          :init (when-let [d (&lt;!! (:in-chan @pipe))]\n                  (reset! pipe :in-data d)\n                  (reset! ps0 :in-rq tick)\n                  :get-ak)\n\n          :get-ak (when (= (:in-ak @ps0)\n                          (:in-rq @ps0))\n                    (pln :pipe-got-ps0-ack)\n                    :init))))))&quot;, :offset 561, :ns &quot;example.mxpipe&quot;} {:command &quot;(let [swx (atom {:x 42})]\n  (swap! swx assoc :x 1))&quot;, :offset 51, :ns &quot;example.mxpipe&quot;} {:command &quot;(defn pipe-seg-state [pipe]\n  (let [in-data (atom nil)]\n    (cF (let [tick (&lt;mget pipe :clock)\n              plme (fn [&amp; r]\n                     (apply pln :seg (pseg-id me) r))]\n          (cond\n            (zero? tick) :init\n\n            :default\n            (do\n              ;;(plme :seg-fst! cache)\n              (or (case cache\n                    :init (when (&gt; (pseg-in-rq me) (pseg-in-ak me))\n                            (reset! in-data\n                              (if-let [ps (pseg-prior me)]\n                                (:out-data @ps)\n                                (:in-data @(pseg-pipe me))))\n                            (assert @in-data)\n                            :ak-data)\n\n                    :ak-data\n                    (do\n                      (alter me assoc :in-ak (pseg-in-rq me))\n                      :process-data)\n\n                    :process-data\n                    (do\n                      (alter me assoc :out-data\n                        ((pseg-processor me) @in-data))\n                      ;(plme :seg-computed-dout (:out-data @me))\n                      :relay-result)\n\n                    :relay-result\n                    (do\n                      ;(plme :seg-relay)\n                      (if-let [seg-next (pseg-next me)]\n                        (do\n                          (alter seg-next assoc :in-rq tick)\n                          :get-ak-from-next-seg)\n                        (do\n                          (plme :piping-out!!!! (pseg-id me) (:out-data @me))\n                          (&gt;!! (:out-chan @pipe) (:out-data @me))\n                          :init)))\n\n                    :get-ak-from-next-seg\n                    (when (= (pseg-in-ak (pseg-next me))\n                            (pseg-in-rq (pseg-next me)))\n                      :init)\n                    (assert false (str \&quot;bad seg state \&quot; cache)))\n                cache)))))))&quot;, :offset 1895, :ns &quot;example.mxpipe&quot;} {:command &quot;(defn make-mxpipe [processors]\n  (md/make ::md/family\n    :clock (cI 0)\n    :in-chan (chan)\n    :out-chan (chan)\n    :in-data nil\n    :kids (cF (the-kids\n                (do ;;doall\n                  (map (fn [id proc]\n                         (make-pipe-seg me id proc))\n                    (range)\n                    processors))))\n\n    :seg-id-map (cF (into {}\n                      (for [seg (&lt;mget me :kids)]\n                        [(pseg-id seg) seg])))\n\n    :fst (cF (pipe-state me cache))))&quot;, :offset 500, :ns &quot;example.mxpipe&quot;} {:command &quot;(defn pipe-seg-state [pipe]\n  (let [in-data (atom nil)]\n    (cF (let [tick (&lt;mget pipe :clock)\n              plme (fn [&amp; r]\n                     (apply pln :seg (pseg-id me) r))]\n          (cond\n            (zero? tick) :init\n\n            :default\n            (do\n              ;;(plme :seg-fst! cache)\n              (or (case cache\n                    :init (when (&gt; (pseg-in-rq me) (pseg-in-ak me))\n                            (reset! in-data\n                              (if-let [ps (pseg-prior me)]\n                                (:out-data @ps)\n                                (:in-data @(pseg-pipe me))))\n                            (assert @in-data)\n                            :ak-data)\n\n                    :ak-data\n                    (do\n                      (alter me assoc :in-ak (pseg-in-rq me))\n                      :process-data)\n\n                    :process-data\n                    (do\n                      (alter me assoc :out-data\n                        ((pseg-processor me) @in-data))\n                      ;(plme :seg-computed-dout (:out-data @me))\n                      :relay-result)\n\n                    :relay-result\n                    (do\n                      ;(plme :seg-relay)\n                      (if-let [seg-next (pseg-next me)]\n                        (do\n                          (alter seg-next assoc :in-rq tick)\n                          :get-ak-from-next-seg)\n                        (do\n                          (plme :piping-out!!!! (pseg-id me) (:out-data @me))\n                          (&gt;!! (:out-chan @pipe) (:out-data @me))\n                          :init)))\n\n                    :get-ak-from-next-seg\n                    (when (= (pseg-in-ak (pseg-next me))\n                            (pseg-in-rq (pseg-next me)))\n                      :init)\n                    (assert false (str \&quot;bad seg state \&quot; cache)))\n                (do \n                  (pln :nothnghappened cache)\n                  cache))))))))&quot;, :offset 1965, :ns &quot;example.mxpipe&quot;} {:command &quot;(take 3 (repeat (random 1000)))&quot;, :offset 31, :ns &quot;user&quot;} {:command &quot;(take 3 (repeat (rand-int 1000)))&quot;, :offset 33, :ns &quot;user&quot;} {:command &quot;(repeat 5 (rand-int 1000))&quot;, :offset 26, :ns &quot;user&quot;} {:command &quot;(defn make-mxpipe [processors]\n  (md/make ::md/family\n    :clock (cI 0)\n    :in-chan (chan)\n    :out-chan (chan)\n    :ps0-in (chan)\n    :psn-out (chan)\n    :in-data nil\n    :kids (cF (the-kids\n                (loop [seg-id 0\n                       ;; seg-in (:ps0-in @me)\n                       [proc . procs] processors\n                       segs []]\n                  (if !proc\n                    segs\n                    (let [seg (make-pipe-seg me seg-id proc)]\n                      (recur (inc seg-id) procs (conj segs seg)))))\n                  #_\n                (map (fn [id proc]\n                       (make-pipe-seg me id proc))\n                  (range)\n                  processors)))\n\n    :seg-id-map (cF (into {}\n                      (for [seg (&lt;mget me :kids)]\n                        [(pseg-id seg) seg])))\n\n    :fst (cF (pipe-state me cache))))&quot;, :offset 866, :ns &quot;example.mxpipe&quot;} {:command &quot;(defn make-mxpipe [processors]\n  (md/make ::md/family\n    :clock (cI 0)\n    :in-chan (chan)\n    :out-chan (chan)\n    :ps0-in (chan)\n    :psn-out (chan)\n    :in-data nil\n    :kids (cF (the-kids\n                (loop [seg-id 0\n                       ;; seg-in (:ps0-in @me)\n                       [proc . procs] processors\n                       segs []]\n                  (if (nil? proc)\n                    segs\n                    (let [seg (make-pipe-seg me seg-id proc)]\n                      (recur (inc seg-id) procs (conj segs seg)))))\n                  #_\n                (map (fn [id proc]\n                       (make-pipe-seg me id proc))\n                  (range)\n                  processors)))\n\n    :seg-id-map (cF (into {}\n                      (for [seg (&lt;mget me :kids)]\n                        [(pseg-id seg) seg])))\n\n    :fst (cF (pipe-state me cache))))&quot;, :offset 872, :ns &quot;example.mxpipe&quot;} {:command &quot;(defn make-mxpipe [processors]\n  (md/make ::md/family\n    :clock (cI 0)\n    :in-chan (chan)\n    :out-chan (chan)\n    :ps0-in (chan)\n    :psn-out (chan)\n    :in-data nil\n    :kids (cF (the-kids\n                (loop [seg-id 0\n                       ;; seg-in (:ps0-in @me)\n                       [proc &amp; procs] processors\n                       segs []]\n                  (if (nil? proc)\n                    segs\n                    (let [seg (make-pipe-seg me seg-id proc)]\n                      (recur (inc seg-id) procs (conj segs seg)))))\n                  #_\n                (map (fn [id proc]\n                       (make-pipe-seg me id proc))\n                  (range)\n                  processors)))\n\n    :seg-id-map (cF (into {}\n                      (for [seg (&lt;mget me :kids)]\n                        [(pseg-id seg) seg])))\n\n    :fst (cF (pipe-state me cache))))&quot;, :offset 872, :ns &quot;example.mxpipe&quot;} {:command &quot;(loop [[x &amp; xr] [1 2 3]]\n  (when x\n    (pln :x x)\n    (recur xr)))&quot;, :offset 66, :ns &quot;example.mxpipe&quot;} {:command &quot;(loop [[x &amp; xr] [1 2 3]\n       vals []]\n  (pln :x x)\n  (if (nil? x)\n    vals\n    (recur xr (conj vals (* 2 x)))))&quot;, :offset 113, :ns &quot;example.mxpipe&quot;} {:command &quot;(defn make-mxpipe [processors]\n  (md/make ::md/family\n    :clock (cI 0)\n    :in-chan (chan)\n    :out-chan (chan)\n    :ps0-in (chan)\n    :psn-out (chan)\n    :in-data nil\n    :kids (cF (the-kids\n                (loop [seg-id 0\n                       ;; seg-in (:ps0-in @me)\n                       [proc &amp; procs] processors\n                       segs []]\n                  (if (nil? proc)\n                    segs\n                    (let [seg (make-pipe-seg me seg-id proc)]\n                      (pln :seg seg-id)\n                      (recur (inc seg-id) procs (conj segs seg)))))\n                  #_\n                (map (fn [id proc]\n                       (make-pipe-seg me id proc))\n                  (range)\n                  processors)))\n\n    :seg-id-map (cF (into {}\n                      (for [seg (&lt;mget me :kids)]\n                        [(pseg-id seg) seg])))\n\n    :fst (cF (pipe-state me cache))))&quot;, :offset 912, :ns &quot;example.mxpipe&quot;} {:command &quot;(deftest pipe-clocked-outside\n  (pln :go)\n  (cells-init)\n\n  (let [procs [(fn [data]\n                 (map #(* % 3) data))\n\n               #_(fn [data]\n                   (map #(+ % 100) data))\n\n               #_(fn [data]\n                   (map #(- %) data))]\n\n        pipe (make-mxpipe procs)\n        pipe-in (:in-chan @pipe)\n        pipe-out (:out-chan @pipe)\n        running (atom true)]\n\n    (is (= (count procs)\n          (count (pipe-segs pipe))))\n\n    (assert (and pipe pipe-in pipe-out))\n\n    (let [data [[14]\n                ;[0 1 2]\n                ;[1000 2000 3000]\n                ;[-1 -10 -100]\n                ;[10 -20 30]\n                ]]\n      #_\n      (go\n        (loop []\n            (when @running\n              (dosync\n                (&gt;! pipe-in [(rand-int 100)])))))\n\n      (go\n        (doseq [datum data]\n          (pln :goput datum)\n          (dosync\n            (put! pipe-in datum))))\n\n      #_\n      (go\n        (dotimes [n 30]\n          (when @running\n            (pln :clock-bump (inc n))\n            (dosync\n              (mswap!&gt; pipe :clock inc)))))\n\n      (loop [n 2]\n        (pln :looping!!! n)\n        (when (pos? n)\n          (let [tout (timeout 10)\n                result (alt!!\n                         tout :timeout\n                         pipe-out\n                         ([r] r))]\n            (pln :drvr-bam-out result)\n            (if (= result :timeout)\n              (reset! running false)\n              (recur (dec n))))))\n\n      (pln :driver-exiting))))&quot;, :offset 1504, :ns &quot;example.mxpipe-test&quot;} {:command &quot;(defn pipe-state [pipe fst]\n  (let [plme (fn [&amp; r]\n               (apply pln :pip r))\n        tick (&lt;mget pipe :clock)\n        ps0 (first (pipe-segs pipe))]\n    ;(plme :pst-tick! tick)\n    (cond\n      (zero? tick) :init\n\n      :default\n      (do\n        ;(plme :pst-fsm-case! fst)\n        (or\n          (case fst\n            :init (when-let [d (poll! (:in-chan @pipe))]\n                    (alter pipe assoc :in-data d)\n                    (alter ps0 assoc :in-rq tick)\n                    (go (mset!&gt; me :clocking true))\n                    :get-ak)\n\n            :get-ak (when (= (:in-ak @ps0)\n                            (:in-rq @ps0))\n                      ;\n                      :init)\n            (assert false (str \&quot;bad pipe state &lt;\&quot; fst \&quot;&gt;\&quot;)))\n          fst)))))&quot;, :offset 770, :ns &quot;example.mxpipe&quot;} {:command &quot;(defn fmo [me id-name]\n  (or (mxu-find-name me id-name)\n    (mxu-find-id me id-name)\n    (throw (str \&quot;fmo&gt; not id or name \&quot; id-name))))&quot;, :offset 135, :ns &quot;tiltontec.model.core&quot;}], :remote []}}</component>
  <component name="RunManager">
    <configuration default="true" type="Applet" factoryName="Applet">
      <option name="HTML_USED" value="false" />
      <option name="WIDTH" value="400" />
      <option name="HEIGHT" value="300" />
      <option name="POLICY_FILE" value="$APPLICATION_HOME_DIR$/bin/appletviewer.policy" />
      <module />
    </configuration>
    <configuration default="true" type="Application" factoryName="Application">
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Unnamed" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="matrix" />
      <setting name="displayName" value="" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="replPortFileType" value="STANDARD" />
      <setting name="customPortFile" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="JUnit" factoryName="JUnit">
      <option name="TEST_OBJECT" value="class" />
      <option name="WORKING_DIRECTORY" value="$MODULE_DIR$" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration default="true" type="TestNG">
      <option name="TEST_OBJECT" value="CLASS" />
      <option name="WORKING_DIRECTORY" value="$MODULE_DIR$" />
      <properties />
      <listeners />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration default="true" type="#org.jetbrains.idea.devkit.run.PluginConfigurationType">
      <module name="" />
      <option name="VM_PARAMETERS" value="-Xmx512m -Xms256m -XX:MaxPermSize=250m -ea" />
      <option name="PROGRAM_PARAMETERS" />
      <predefined_log_file enabled="true" id="idea.log" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="d6f74870-5b99-473b-b2b2-5bc6dd670308" name="Default" comment="" />
      <created>1517165659858</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1517165659858</updated>
    </task>
    <servers />
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>1.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>matrix</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
                <option value="0.6" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectJDKs.UI">
        <settings>
          <last-edited>1.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Leiningen: clojure-complete:0.2.4</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>