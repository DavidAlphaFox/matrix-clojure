{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {record-dependency tiltontec.cell.evaluate, ensure-value-is-current tiltontec.cell.evaluate, with-integrity tiltontec.cell.integrity, c-get tiltontec.cell.evaluate, c-value-assume tiltontec.cell.evaluate, rmap-setf tiltontec.util.core}, :excludes #{}, :name tiltontec.cell.synapse, :imports nil, :requires {tiltontec.util.core tiltontec.util.core, tiltontec.cell.integrity tiltontec.cell.integrity, tiltontec.cell.evaluate tiltontec.cell.evaluate}, :cljs.spec/speced-vars [], :uses {record-dependency tiltontec.cell.evaluate, ensure-value-is-current tiltontec.cell.evaluate, c-get tiltontec.cell.evaluate, c-value-assume tiltontec.cell.evaluate, rmap-setf tiltontec.util.core}, :defs {with-synapse {:protocol-inline nil, :meta {:file "/Users/kennethtilton/todoFRP/todo/MatrixCLJS/src/tiltontec/cell/synapse.cljc", :line 12, :column 11, :end-line 12, :end-column 23, :macro true, :arglists (quote ([[synapse-id [& closure-bindings]] & body])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env [synapse-id [& closure-bindings]] body)], :arglists ([&form &env [synapse-id [& closure-bindings]] & body]), :arglists-meta (nil)}}, :name tiltontec.cell.synapse/with-synapse, :variadic true, :file "src/tiltontec/cell/synapse.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env [synapse-id [& closure-bindings]] body)], :arglists ([&form &env [synapse-id [& closure-bindings]] & body]), :arglists-meta (nil)}, :method-params [(&form &env [synapse-id [& closure-bindings]] body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 12, :macro true, :end-line 12, :max-fixed-arity 3, :fn-var false, :arglists ([&form &env [synapse-id [& closure-bindings]] & body])}}, :cljs.spec/registry-ref [], :require-macros {tiltontec.cell.integrity tiltontec.cell.integrity}, :cljs.analyzer/constants {:seen #{:synaptic? tiltontec.cell.evaluate/record-dependency value__11701__auto__ cljs.core/when :slot tiltontec.util.core/rmap-setf bingo__11698__auto__ tiltontec.cell.synapse/c-model cljs.core/= tiltontec.cell.synapse/make-c-formula tiltontec.cell.evaluate/ensure-value-is-current cljs.core/deref :rule new-syn__11700__auto__ tiltontec.cell.synapse/c-synapses cljs.core/conj :synapses :synapse cljs.core/let p1__11696__11699__auto__ tiltontec.cell.synapse/*depender* fn* :synapse-returns cljs.core/meta :code cljs.core/println :synapse-id synapse__11697__auto__ tiltontec.cell.synapse/c-fn tiltontec.cell.integrity/with-integrity quote cljs.core/or cljs.core/some :model}, :order [cljs.core/let synapse__11697__auto__ cljs.core/or bingo__11698__auto__ cljs.core/some fn* p1__11696__11699__auto__ cljs.core/when cljs.core/= :synapse-id cljs.core/deref tiltontec.cell.synapse/c-synapses tiltontec.cell.synapse/*depender* new-syn__11700__auto__ tiltontec.cell.synapse/make-c-formula :model tiltontec.cell.synapse/c-model :slot :code quote :synaptic? :rule tiltontec.cell.synapse/c-fn tiltontec.util.core/rmap-setf :synapses cljs.core/conj tiltontec.cell.evaluate/record-dependency value__11701__auto__ tiltontec.cell.integrity/with-integrity tiltontec.cell.evaluate/ensure-value-is-current :synapse cljs.core/println :synapse-returns cljs.core/meta]}, :doc nil}