(ns matrixrn.demo.http
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require
    [clojure.string :as str]
    [applied-science.js-interop :as j]

    [react]
    [react-native :as rn]
    [react-native-elements :as rne]

    [tiltontec.cell.core :refer-macros [cF cF+ cFn cFonce] :refer [cI]]
    [tiltontec.cell.integrity :refer-macros [with-cc]]
    [tiltontec.model.core :refer [with-par matrix mx-par mget mset! mswap!] :as md]

    [matrixrn.matrixrn :as mxn :refer [mk with-props fmu mk]]
    [cljs-http.client :as http]
    [cljs.core.async :refer [<!]]))

(defn search-input []
  (mk rn/TextInput
    {:name            :search-input
     :searchstring    (cFn (mget me :defaultValue))
     ;:defaultValue    (cI "simo")
     :lookup-go?      (cI false :ephemeral? true)
     :lookup-response (cI nil)
     :lookup          (cF+ [:obs (fn [_ me chan prior-chan]
                                   ;; todo work out how to close prior chan
                                   (when chan
                                     (go (let [response (<! chan)
                                               search (mget me :searchstring)
                                               hits (filter (fn [ostr]
                                                              (str/includes? ostr search))
                                                      (map :login (:body response)))]
                                           (with-cc         ;; required to mutate state inside an observer
                                             (mset! me :lookup-response
                                               (or (seq hits) (vector (str "no matches for " search)))))))))]
                        (when (mget (fmu :do-any-lookup?) :value)
                          (when (not (str/blank? (mget me :searchstring)))
                            (when (mget me :lookup-go?)
                              (http/get "https://api.github.com/users"
                                {:with-credentials? false
                                 :query-params      {"since" 135}})))))}
    (with-props [:defaultValue]
      {:style           {:height          40
                         :width           192
                         :margin          12
                         :padding         10
                         :backgroundColor "linen"
                         :borderWidth     1}
       :placeholder     "whassup?"
       :autoCapitalize  "none"
       :autoCorrect     false
       :autoFocus       true
       :onChangeText    #(do (prn :onchange! %)
                             (mset! me :searchstring %))
       :onSubmitEditing #(do (prn :submit-sees %)
                             (mset! me :lookup-go? true))})))

(defn search-output []
  ;; todo convert to FlatList - show all matches
  (mxn/mk rn/Button
    {:users (cF (mget (fmu :search-input) :lookup-response))
     :title (cF (if-let [u1 (first (mget me :users))]
                  (str u1)
                  (str "no da user " (rand-int 9999))))}
    {:title (mget me :title)
     ;; ^^^ alternative to, and what is generated by, with-props
     :color "green"}))

(defn lookup? []
  (mxn/mk rn/Switch
    {:name       :do-any-lookup?
     :value      (cI true)
     :thumbColor (cF (if (mget me :value)
                       "#f5dd4b" "#f4f3f4"))}
    (with-props [:value :thumbColor]
      {:onValueChange       #(mswap! me :value not)
       :ios_backgroundColor "#3e3e3e"
       :trackColor          {:false "#767577"
                             :true  "#81b0ff"}})))

(defn demo []
  (md/make ::rnApp
    :rx-dom (cFonce
              (with-par me
                (mk rn/View {}
                  {:style {:flex            1
                           :marginTop       96
                           :padding         24
                           :alignItems      "flex-start"
                           :backgroundColor "cyan"}}
                  (lookup?)
                  (search-input)
                  (search-output))))))