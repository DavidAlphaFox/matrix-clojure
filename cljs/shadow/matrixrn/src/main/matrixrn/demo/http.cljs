(ns matrixrn.demo.http
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require
    [clojure.string :as str]
    [applied-science.js-interop :as j]

    [react]
    [react-native :as rn]
    [react-native-elements :as rne]

    [tiltontec.cell.core :refer-macros [cF cF+ cFn cFonce] :refer [cI]]
    [tiltontec.cell.integrity :refer-macros [with-cc]]
    [tiltontec.model.core :refer [with-par matrix mx-par mget mset! mswap!] :as md]

    [matrixrn.matrixrn :as mxn :refer [mk with-props fmu mk]]
    [cljs-http.client :as http]
    [cljs.core.async :refer [<!]]
    [matrixrn.demo.flatlist :as flat]))

(def <> react/createElement)

(defn search-input []
  (mk rn/TextInput
    {:name            :search-input
     :searchstring    (cFn (mget me :defaultValue))
     ;:defaultValue    (cI "simo")
     :lookup-go?      (cI false :ephemeral? true)
     :lookup-response (cI nil)
     :lookup          (cF+ [:obs (fn [_ me chan prior-chan]
                                   ;; todo work out how to close prior chan
                                   (when chan
                                     (go (let [response (<! chan)
                                               search (mget me :searchstring)
                                               hits (filter (fn [ostr]
                                                              (str/includes? ostr search))
                                                      (map :login (:body response)))]
                                           (prn :github-users hits)
                                           (with-cc         ;; required to mutate state inside an observer
                                             (mset! me :lookup-response
                                               (or (seq hits) (vector (str "no matches for " search)))))))))]
                        (when (mget (fmu :do-any-lookup?) :value)
                          (when (not (str/blank? (mget me :searchstring)))
                            (when (mget me :lookup-go?)
                              (http/get "https://api.github.com/users"
                                {:with-credentials? false
                                 :query-params      {"since" 135}})))))}
    (with-props [:defaultValue]
      {:style           {:height          40
                         :width           192
                         :margin          12
                         :padding         10
                         :backgroundColor "linen"
                         :borderWidth     1}
       :placeholder     "whassup?"
       :autoCapitalize  "none"
       :autoCorrect     false
       :autoFocus       true
       :onChangeText    #(do (prn :onchange! %)
                             (mset! me :searchstring %))
       :onSubmitEditing #(do (prn :submit-sees %)
                             (mset! me :lookup-go? true))})))


(defn search-output []
  ;; todo convert to FlatList - show all matches

  #_(mk rn/Button
      {:users (cF (mget (fmu :search-input) :lookup-response))
       :title (cF (if-let [u1 (first (mget me :users))]
                    (str u1)
                    "No such user."))}
      {:title (mget me :title)
       ;; ^^^ alternative to, and what is generated by, with-props
       :color "green"})

  (mk rn/FlatList
    {:users (cF (mget (fmu :search-input) :lookup-response))
     :data  (cF (let [rawu (mget me :users)]
                  (prn :rawu rawu)
                  (clj->js
                    (if-let [users (seq #_ (mget me :users)
                                     (mget (fmu :search-input) :lookup-response))]
                      (do (prn :bamusers users)
                          (for [user-login users]
                            (do (prn :building-item user-login)
                                (flat/build-keyed-item user-login))))
                      [(flat/build-keyed-item "No such user")]))))}
    (with-props [:data]
      {:keyExtractor (fn [i] (.-key i))
       :renderItem   (fn [i]
                       (prn :reacting i)
                       (prn :reacting (.-item i))
                       (prn :mas (.. i -item -key))
                       (prn :mas (.. i -item -title))
                       (prn :reacting i)
                       ;; here we have to "speak" React....
                       (<> rn/Text
                         #js {:style #js {:fontSize 18}}
                         (.. i -item -title)))})))

(defn lookup? []
  (mxn/mk rn/Switch
    {:name       :do-any-lookup?
     :value      (cI true)
     :thumbColor (cF (if (mget me :value)
                       "#f5dd4b" "#f4f3f4"))}
    (with-props [:value :thumbColor]
      {:onValueChange       #(mswap! me :value not)
       :ios_backgroundColor "#3e3e3e"
       :trackColor          {:false "#767577"
                             :true  "#81b0ff"}})))

;; we break this out as a separate function so we can demonstrate re-use, embedding
;; the same content in a Screen on the Navi demo

(defn http-beef [& [view-options]]
  (mk rn/View {}
    (merge
      {:style {:flex            1
               :marginTop       96
               :padding         24
               :alignItems      "center"
               :backgroundColor "yellow"}}
      view-options)
    (lookup?)
    (search-input)
    (search-output)))

(defn demo []
  (md/make ::rnApp
    :rx-dom (cFonce
              (with-par me
                (http-beef)
                #_(mk rn/View {}
                    {:style {:flex            1
                             :marginTop       96
                             :padding         24
                             :alignItems      "center"
                             :backgroundColor "cyan"}}
                    (lookup?)
                    (search-input)
                    (search-output))))))